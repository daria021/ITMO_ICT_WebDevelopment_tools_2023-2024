{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u0410\u0432\u0442\u043e\u0440: \u0415\u0434\u0438\u0433\u0430\u0440\u0435\u0432\u0430 \u0414\u0430\u0440\u044c\u044f 368146 \u0413\u0440\u0443\u043f\u043f\u0430: K3339 \u041f\u043e\u0442\u043e\u043a: WEB 2.1","title":"Home"},{"location":"lab1/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f FastAPI \u041f\u0440\u043e\u0435\u043a\u0442 \u0438 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u0421\u0435\u0440\u0432\u0438\u0441 \u0440\u0430\u0441\u0441\u044b\u043b\u043e\u043a \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0443 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u044b\u0445 \u043f\u0438\u0441\u0435\u043c \u0433\u0440\u0443\u043f\u043f\u0430\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0451\u043d\u043d\u044b\u0445 \u043f\u043e \u0442\u0435\u0433\u0430\u043c: \u0432\u044b \u0441\u043e\u0437\u0434\u0430\u0451\u0442\u0435 \u0440\u0430\u0441\u0441\u044b\u043b\u043a\u0443 \u0441 \u0442\u0435\u043a\u0441\u0442\u043e\u043c \u0438 \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u0442\u0435\u0433\u043e\u0432, \u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043d\u0430\u0445\u043e\u0434\u0438\u0442 \u0432\u0441\u0435\u0445 \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u044d\u0442\u0438 \u0442\u0435\u0433\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0438 \u0441\u0442\u0430\u0432\u0438\u0442 \u0437\u0430\u0434\u0430\u0447\u0438 \u043d\u0430 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0443 \u043f\u0438\u0441\u0435\u043c \u0432 \u0444\u043e\u043d\u043e\u0432\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0447\u0435\u0440\u0435\u0437 Celery \u0441 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u043e\u0442\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0439 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0438. \u0412 \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u043c\u0438\u043a\u0440\u043e\u0441\u0435\u0440\u0432\u0438\u0441\u043d\u0430\u044f \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u043d\u0430 \u0431\u0430\u0437\u0435 FastAPI \u0438 Celery, \u0433\u0434\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0440\u0430\u0437\u0432\u0451\u0440\u043d\u0443\u0442 \u0432 \u0441\u0432\u043e\u0451\u043c \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0435: db (PostgreSQL) \u2014 \u0445\u0440\u0430\u043d\u0438\u0442 \u043e\u0441\u043d\u043e\u0432\u043d\u0443\u044e \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e (\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438, \u0442\u0435\u0433\u0438, \u0440\u0430\u0441\u0441\u044b\u043b\u043a\u0438). redis \u2014 \u0431\u0440\u043e\u043a\u0435\u0440 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f Celery. backend \u2014 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 API-\u0441\u0435\u0440\u0432\u0438\u0441: \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438, \u0442\u0435\u0433\u0430\u043c\u0438 \u0438 \u0440\u0430\u0441\u0441\u044b\u043b\u043a\u0430\u043c\u0438. celery \u2014 \u0432\u043e\u0440\u043a\u0435\u0440 Celery, \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0449\u0438\u0439 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0443 \u043e\u0442\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 \u043f\u0438\u0441\u0435\u043c. admin \u2014 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u0432\u0435\u0431-\u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f (FastAPI + Jinja2). docker-compose.yml : services: db: image: postgres:15 container_name: db_newsletter env_file: backend/.env ports: - \"5432:5432\" environment: - POSTGRES_PASSWORD=postgres restart: unless-stopped volumes: - postgres_data:/var/lib/postgresql/data/ - /etc/localtime:/etc/localtime:ro - /etc/timezone:/etc/timezone:ro redis: image: redis:7 container_name: redis_app backend: build: context: ./backend dockerfile: Dockerfile env_file: backend/.env container_name: mailer_app command: [ \"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\" ] ports: - \"9999:8000\" depends_on: - db - celery restart: unless-stopped celery: build: context: ./backend env_file: backend/.env container_name: celery_app command: celery -A celery_tasks.setup_celery worker --loglevel=info depends_on: - redis admin: build: context: ./admin dockerfile: Dockerfile env_file: admin/.env container_name: mailer_web_app command: [ \"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\" ] ports: - \"9998:8000\" depends_on: - db restart: unless-stopped volumes: postgres_data: ORM-\u043c\u043e\u0434\u0435\u043b\u0438 (SQLAlchemy) \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f SQLAlchemy + relationship \u0434\u043b\u044f \u0441\u0432\u044f\u0437\u0435\u0439 many-to-many \u043c\u0435\u0436\u0434\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438 \u0438 \u0442\u0435\u0433\u0430\u043c\u0438. \u041f\u0440\u0438\u043c\u0435\u0440 \u043c\u043e\u0434\u0435\u043b\u0438 User : from sqlalchemy import Integer from sqlalchemy.orm import Mapped, mapped_column, relationship from db.database import Base from tags.models import Tag class User(Base): __tablename__ = \"user\" id: Mapped[int] = mapped_column(Integer, primary_key=True) email: Mapped[str] = mapped_column(unique=True) hash_password: Mapped[str] tags: Mapped[list[Tag]] = relationship( 'Tag', secondary='user_tag', back_populates='users', lazy='selectin' ) \u0412\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438 \u0432 \u043e\u0442\u0432\u0435\u0442\u0435 get_all_users CRUD API \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u043d\u0430\u0431\u043e\u0440 CRUD-\u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u0432 \u0441 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0435\u0439 \u0442\u0438\u043f\u043e\u0432: \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 ( /user ): \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435, \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043f\u043e ID \u0438 email, \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435, \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435, \u043f\u0440\u0438\u0432\u044f\u0437\u043a\u0430 \u0442\u0435\u0433\u0430. \u0422\u0435\u0433\u0438 ( /tag ): \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435, \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445. \u0420\u0430\u0441\u0441\u044b\u043b\u043a\u0438 ( /newsletter ): \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441 \u043e\u0442\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0439 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u043e\u0439, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435, \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435, \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435. \u041f\u0440\u0438\u043c\u0435\u0440 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u0430 \u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u043d\u043e\u0433\u043e \u0441\u043b\u043e\u044f \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0440\u0430\u0441\u0441\u044b\u043b\u043a\u0438 \u0420\u043e\u0443\u0442\u0435\u0440 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u043c\u0435\u0442\u043e\u0434 \u0441\u0435\u0440\u0432\u0438\u0441\u0430 NewsletterService, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0441\u043d\u0430\u0447\u0430\u043b\u0430 Pydantic-\u043c\u043e\u0434\u0435\u043b\u044c NewsletterCreateRequest \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0432 DTO \u0447\u0435\u0440\u0435\u0437 model_validate \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442\u0441\u044f \u0432 \u0411\u0414, \u0437\u0430\u0442\u0435\u043c \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e tag_id \u0441\u043e\u0437\u0434\u0430\u0451\u0442\u0441\u044f \u0441\u0432\u044f\u0437\u044c \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 newsletter_tag. \u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u043f\u043e \u0442\u0435\u0433\u0430\u043c \u0440\u0430\u0441\u0441\u044b\u043b\u043a\u0438 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f user_tags_service.get_users_by_tag, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a email-\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u0435\u0439, \u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u043d\u0438\u0445 \u0447\u0435\u0440\u0435\u0437 send_letter.apply_async(..., eta=newsletter.target_time) \u0441\u0442\u0430\u0432\u0438\u0442\u0441\u044f \u043e\u0442\u043b\u043e\u0436\u0435\u043d\u043d\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430 \u0432 Celery. \u041a\u043e\u0434 \u0440\u043e\u0443\u0442\u0435\u0440\u0430 \u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0433\u043e \u0441\u0435\u0440\u0432\u0438\u0441\u043d\u043e\u0433\u043e \u043c\u0435\u0442\u043e\u0434\u0430, \u043e\u0442\u0432\u0435\u0447\u0430\u044e\u0449\u0438\u0445 \u0437\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0439 \u0440\u0430\u0441\u0441\u044b\u043b\u043a\u0438, \u043f\u0440\u0438\u0432\u044f\u0437\u043a\u0443 \u0442\u0435\u0433\u043e\u0432 \u0438 \u043f\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0443 \u043e\u0442\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u043d\u0430 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0443 \u043f\u0438\u0441\u0435\u043c \u0447\u0435\u0440\u0435\u0437 Celery. @router.post(\"\") async def create_newsletter( newsletter: NewsletterCreateRequest, service=Depends(get_newsletter_service), ) -> NewsletterResponse: created = await service.create_newsletter(newsletter) return created @dataclass class NewsletterService: newsletters: NewsletterRepo tags: TagRepo newsletter_tags: NewsletterTagRepo async def create_newsletter( self, newsletter: NewsletterCreateRequest, ) -> NewsletterResponse: create_dto = NewsletterCreate.model_validate(newsletter) created = await self.newsletters.create(create_dto) logger.info(created.model_dump()) for tag_id in newsletter.tags: dto = NewsletterTagCreate( tag=tag_id, newsletter=created.id, ) await self.newsletter_tags.create(dto) created = await self.newsletters.get(created.id) # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u043f\u043e \u0442\u0435\u0433\u0430\u043c \u0438 \u0441\u0440\u0430\u0437\u0443 \u0441\u0442\u0430\u0432\u0438\u043c \u0437\u0430\u0434\u0430\u0447\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 user_tags_service = get_user_tag_service() recipients = await user_tags_service.get_users_by_tag( tags=[tag.text for tag in created.tags] ) for recipient in recipients: message = MessageSchema( subject=created.subject, recipients=[recipient], # noqa body=created.text, subtype=MessageType.html ) send_letter.apply_async( args=(json_utils.dumps(message, cls=MessageSchemaEncoder),), eta=newsletter.target_time ) logging.getLogger(__name__).info(f\"Queued email to {recipient}\") return created \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439 (Alembic) \u041f\u0440\u043e\u0435\u043a\u0442 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d \u043d\u0430 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 \u0447\u0435\u0440\u0435\u0437 Alembic. \u0410\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044f \u0442\u0438\u043f\u043e\u0432 \u0412\u043e \u0432\u0441\u0435\u0445 \u0440\u043e\u0443\u0442\u0435\u0440\u0430\u0445, \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u0445 \u0438 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044f\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0438 \u0438 ConfigDict(from_attributes=True) \u0434\u043b\u044f \u0447\u0442\u0435\u043d\u0438\u044f \u0438\u0437 ORM: @router.get(\"\") async def get_all_newsletter( newsletter_service = Depends(get_newsletter_service) ) -> list[NewsletterResponse]: res = await newsletter_service.get_all_newsletter() return res class NewsletterUpdate(BaseModel): text: str subject: str target_time: Optional[datetime] = None model_config = ConfigDict(from_attributes=True) \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u251c\u2500\u2500 admin \u2502 \u251c\u2500\u2500 Dockerfile \u2502 \u251c\u2500\u2500 auth \u2502 \u2502 \u251c\u2500\u2500 auth_form.py \u2502 \u2502 \u251c\u2500\u2500 auth_helper.py \u2502 \u2502 \u251c\u2500\u2500 auth_service_interface.py \u2502 \u2502 \u251c\u2500\u2500 dependencies \u2502 \u2502 \u2502 \u2514\u2500\u2500 services.py \u2502 \u2502 \u251c\u2500\u2500 exceptions.py \u2502 \u2502 \u2514\u2500\u2500 schemas.py \u2502 \u251c\u2500\u2500 config.py \u2502 \u251c\u2500\u2500 main.py \u2502 \u251c\u2500\u2500 midlewares \u2502 \u2502 \u2514\u2500\u2500 auth_midleware.py \u2502 \u251c\u2500\u2500 requirements.txt \u2502 \u251c\u2500\u2500 routes \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 auth_routes.py \u2502 \u2502 \u251c\u2500\u2500 dependencies \u2502 \u2502 \u2502 \u2514\u2500\u2500 services.py \u2502 \u2502 \u251c\u2500\u2500 newsletter_router.py \u2502 \u2502 \u251c\u2500\u2500 tag_router.py \u2502 \u2502 \u2514\u2500\u2500 user_router.py \u2502 \u251c\u2500\u2500 services \u2502 \u2502 \u251c\u2500\u2500 auth_service.py \u2502 \u2502 \u251c\u2500\u2500 dependencies \u2502 \u2502 \u2502 \u2514\u2500\u2500 services.py \u2502 \u2502 \u251c\u2500\u2500 newsletter_service.py \u2502 \u2502 \u251c\u2500\u2500 schemas.py \u2502 \u2502 \u251c\u2500\u2500 tag_service.py \u2502 \u2502 \u2514\u2500\u2500 user_service.py \u2502 \u251c\u2500\u2500 static \u2502 \u2502 \u251c\u2500\u2500 css \u2502 \u2502 \u2502 \u251c\u2500\u2500 auth.css \u2502 \u2502 \u2502 \u251c\u2500\u2500 base.css \u2502 \u2502 \u2502 \u251c\u2500\u2500 newsletter.css \u2502 \u2502 \u2502 \u251c\u2500\u2500 newsletter_all.css \u2502 \u2502 \u2502 \u251c\u2500\u2500 newsletter_details.css \u2502 \u2502 \u2502 \u251c\u2500\u2500 tag.css \u2502 \u2502 \u2502 \u251c\u2500\u2500 tags.css \u2502 \u2502 \u2502 \u251c\u2500\u2500 user.css \u2502 \u2502 \u2502 \u251c\u2500\u2500 user_newsletters.css \u2502 \u2502 \u2502 \u2514\u2500\u2500 users.css \u2502 \u2502 \u2514\u2500\u2500 images \u2502 \u2502 \u2514\u2500\u2500 \u043a\u0438\u0442\u0442\u0438.jpeg \u2502 \u2514\u2500\u2500 templates \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 auth.html \u2502 \u251c\u2500\u2500 base.html \u2502 \u251c\u2500\u2500 newsletter.html \u2502 \u251c\u2500\u2500 newsletter_all.html \u2502 \u251c\u2500\u2500 newsletter_details.html \u2502 \u251c\u2500\u2500 signup.html \u2502 \u251c\u2500\u2500 tag.html \u2502 \u251c\u2500\u2500 tag_all.html \u2502 \u251c\u2500\u2500 user.html \u2502 \u251c\u2500\u2500 user_all.html \u2502 \u2514\u2500\u2500 user_newsletters.html \u251c\u2500\u2500 backend \u2502 \u251c\u2500\u2500 Dockerfile \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 abstractions \u2502 \u2502 \u251c\u2500\u2500 AbstractRepoInterface.py \u2502 \u2502 \u251c\u2500\u2500 AbstractRepository.py \u2502 \u2502 \u2514\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 alembic.ini \u2502 \u251c\u2500\u2500 celery_tasks \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 setup_celery.py \u2502 \u2502 \u2514\u2500\u2500 tasks.py \u2502 \u251c\u2500\u2500 config.py \u2502 \u251c\u2500\u2500 db \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2514\u2500\u2500 database.py \u2502 \u251c\u2500\u2500 decoder.py \u2502 \u251c\u2500\u2500 docker \u2502 \u2502 \u2514\u2500\u2500 start_only_db.bat \u2502 \u251c\u2500\u2500 mail.env \u2502 \u251c\u2500\u2500 mail.env.example \u2502 \u251c\u2500\u2500 main.py \u2502 \u251c\u2500\u2500 migrations \u2502 \u2502 \u251c\u2500\u2500 README \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 env.py \u2502 \u2502 \u251c\u2500\u2500 script.py.mako \u2502 \u2502 \u2514\u2500\u2500 versions \u2502 \u2502 \u251c\u2500\u2500 0db08c43dc72_add_timestamp_with_timezone.py \u2502 \u2502 \u251c\u2500\u2500 556eade48481_newsletter_target_time.py \u2502 \u2502 \u251c\u2500\u2500 5e3728acfa88_first.py \u2502 \u2502 \u251c\u2500\u2500 864ebd0009a9_third.py \u2502 \u2502 \u251c\u2500\u2500 98b03d0a93c1_second.py \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 cf77bb0027a1_add_userlogin.py \u2502 \u2502 \u2514\u2500\u2500 d65fdbfa9353_add_unique_to_emails.py \u2502 \u251c\u2500\u2500 newsletter \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 delayed_letter_service.py \u2502 \u2502 \u251c\u2500\u2500 dependencies \u2502 \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 repositories.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 services.py \u2502 \u2502 \u251c\u2500\u2500 models.py \u2502 \u2502 \u251c\u2500\u2500 newsletter_service.py \u2502 \u2502 \u251c\u2500\u2500 repository.py \u2502 \u2502 \u251c\u2500\u2500 router.py \u2502 \u2502 \u2514\u2500\u2500 schemas.py \u2502 \u251c\u2500\u2500 newsletter_tag \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 dependencies \u2502 \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 repositories.py \u2502 \u2502 \u251c\u2500\u2500 models.py \u2502 \u2502 \u251c\u2500\u2500 repository.py \u2502 \u2502 \u2514\u2500\u2500 schemas.py \u2502 \u251c\u2500\u2500 requirements.txt \u2502 \u251c\u2500\u2500 tags \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 dependencies \u2502 \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 repositories.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 services.py \u2502 \u2502 \u251c\u2500\u2500 models.py \u2502 \u2502 \u251c\u2500\u2500 repository.py \u2502 \u2502 \u251c\u2500\u2500 router.py \u2502 \u2502 \u251c\u2500\u2500 schemas.py \u2502 \u2502 \u2514\u2500\u2500 tag_service.py \u2502 \u251c\u2500\u2500 user \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 dependencies \u2502 \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 repositories.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 services.py \u2502 \u2502 \u251c\u2500\u2500 models.py \u2502 \u2502 \u251c\u2500\u2500 repository.py \u2502 \u2502 \u251c\u2500\u2500 router.py \u2502 \u2502 \u251c\u2500\u2500 schemas.py \u2502 \u2502 \u2514\u2500\u2500 user_service.py \u2502 \u251c\u2500\u2500 user_newsletter \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 models.py \u2502 \u2502 \u251c\u2500\u2500 repository.py \u2502 \u2502 \u2514\u2500\u2500 schemas.py \u2502 \u2514\u2500\u2500 user_tag \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 dependencies \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 repositories.py \u2502 \u2502 \u2514\u2500\u2500 services.py \u2502 \u251c\u2500\u2500 models.py \u2502 \u251c\u2500\u2500 repository.py \u2502 \u251c\u2500\u2500 schemas.py \u2502 \u2514\u2500\u2500 user_tag_service.py \u2514\u2500\u2500 docker-compose.yml \u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0438 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 JWT-\u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0438 \u0445\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u043e\u043b\u0435\u0439 \u0447\u0435\u0440\u0435\u0437 bcrypt . \u041f\u0440\u0438\u043c\u0435\u0440 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0432 AuthService : def hash_password(password: str) -> str: return bcrypt.hashpw(password.encode(), bcrypt.gensalt()).decode() def check_password(password: str, hashed: str) -> bool: return bcrypt.checkpw(password.encode(), hashed.encode()) def _generate_tokens(self, user_id: int) -> Tokens: now = datetime.now(tz=timezone.utc) exp = now + timedelta(seconds=self.auth_settings.access_token_lifetime_seconds) token = jwt.encode({'exp': exp, 'user_id': user_id}, key=self.auth_settings.secret_key.get_secret_value(), algorithm='HS256') return Tokens(access_token=token) \u041f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u043e\u0435 midleware \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0438 \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0441\u0442\u044c JWT \u0432 cookie \u0438 \u043f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u043b\u043e\u0433\u0438\u043d\u0430 \u043f\u0440\u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0438: async def check_for_auth(request: Request, call_next): tokens = Tokens(access_token=request.cookies.get(\"access_token\", \"\")) valid = await auth_service.check_tokens(tokens) if not valid[\"is_valid\"]: return RedirectResponse(f\"/auth?destination={request.url.path}\", status_code=303) request.state.user_id = valid[\"user_id\"] return await call_next(request) \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 FastAPI + Jinja2: \u0432\u0441\u0435 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u043e\u0444\u043e\u0440\u043c\u043b\u0435\u043d\u044b \u0447\u0435\u0440\u0435\u0437 HTML-\u0448\u0430\u0431\u043b\u043e\u043d\u044b \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c\u044b\u0435 \u0444\u0430\u0439\u043b\u044b CSS. \u041f\u0440\u0438\u043c\u0435\u0440 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0432\u0445\u043e\u0434\u0430: \u041f\u0440\u0438\u043c\u0435\u0440 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0440\u0430\u0441\u0441\u044b\u043b\u043a\u0438 \u041f\u0440\u0438\u043c\u0435\u0440 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u043c\u043e\u0438\u0445 \u0440\u0430\u0441\u0441\u044b\u043b\u043e\u043a","title":"Lab 1"},{"location":"lab1/#1-fastapi","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f FastAPI"},{"location":"lab1/#_1","text":"\u0421\u0435\u0440\u0432\u0438\u0441 \u0440\u0430\u0441\u0441\u044b\u043b\u043e\u043a \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0443 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u044b\u0445 \u043f\u0438\u0441\u0435\u043c \u0433\u0440\u0443\u043f\u043f\u0430\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0451\u043d\u043d\u044b\u0445 \u043f\u043e \u0442\u0435\u0433\u0430\u043c: \u0432\u044b \u0441\u043e\u0437\u0434\u0430\u0451\u0442\u0435 \u0440\u0430\u0441\u0441\u044b\u043b\u043a\u0443 \u0441 \u0442\u0435\u043a\u0441\u0442\u043e\u043c \u0438 \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u0442\u0435\u0433\u043e\u0432, \u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043d\u0430\u0445\u043e\u0434\u0438\u0442 \u0432\u0441\u0435\u0445 \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u044d\u0442\u0438 \u0442\u0435\u0433\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0438 \u0441\u0442\u0430\u0432\u0438\u0442 \u0437\u0430\u0434\u0430\u0447\u0438 \u043d\u0430 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0443 \u043f\u0438\u0441\u0435\u043c \u0432 \u0444\u043e\u043d\u043e\u0432\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0447\u0435\u0440\u0435\u0437 Celery \u0441 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u043e\u0442\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0439 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0438. \u0412 \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u043c\u0438\u043a\u0440\u043e\u0441\u0435\u0440\u0432\u0438\u0441\u043d\u0430\u044f \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u043d\u0430 \u0431\u0430\u0437\u0435 FastAPI \u0438 Celery, \u0433\u0434\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0440\u0430\u0437\u0432\u0451\u0440\u043d\u0443\u0442 \u0432 \u0441\u0432\u043e\u0451\u043c \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0435: db (PostgreSQL) \u2014 \u0445\u0440\u0430\u043d\u0438\u0442 \u043e\u0441\u043d\u043e\u0432\u043d\u0443\u044e \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e (\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438, \u0442\u0435\u0433\u0438, \u0440\u0430\u0441\u0441\u044b\u043b\u043a\u0438). redis \u2014 \u0431\u0440\u043e\u043a\u0435\u0440 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f Celery. backend \u2014 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 API-\u0441\u0435\u0440\u0432\u0438\u0441: \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438, \u0442\u0435\u0433\u0430\u043c\u0438 \u0438 \u0440\u0430\u0441\u0441\u044b\u043b\u043a\u0430\u043c\u0438. celery \u2014 \u0432\u043e\u0440\u043a\u0435\u0440 Celery, \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0449\u0438\u0439 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0443 \u043e\u0442\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 \u043f\u0438\u0441\u0435\u043c. admin \u2014 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u0432\u0435\u0431-\u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f (FastAPI + Jinja2). docker-compose.yml : services: db: image: postgres:15 container_name: db_newsletter env_file: backend/.env ports: - \"5432:5432\" environment: - POSTGRES_PASSWORD=postgres restart: unless-stopped volumes: - postgres_data:/var/lib/postgresql/data/ - /etc/localtime:/etc/localtime:ro - /etc/timezone:/etc/timezone:ro redis: image: redis:7 container_name: redis_app backend: build: context: ./backend dockerfile: Dockerfile env_file: backend/.env container_name: mailer_app command: [ \"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\" ] ports: - \"9999:8000\" depends_on: - db - celery restart: unless-stopped celery: build: context: ./backend env_file: backend/.env container_name: celery_app command: celery -A celery_tasks.setup_celery worker --loglevel=info depends_on: - redis admin: build: context: ./admin dockerfile: Dockerfile env_file: admin/.env container_name: mailer_web_app command: [ \"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\" ] ports: - \"9998:8000\" depends_on: - db restart: unless-stopped volumes: postgres_data:","title":"\u041f\u0440\u043e\u0435\u043a\u0442 \u0438 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430"},{"location":"lab1/#orm-sqlalchemy","text":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f SQLAlchemy + relationship \u0434\u043b\u044f \u0441\u0432\u044f\u0437\u0435\u0439 many-to-many \u043c\u0435\u0436\u0434\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438 \u0438 \u0442\u0435\u0433\u0430\u043c\u0438. \u041f\u0440\u0438\u043c\u0435\u0440 \u043c\u043e\u0434\u0435\u043b\u0438 User : from sqlalchemy import Integer from sqlalchemy.orm import Mapped, mapped_column, relationship from db.database import Base from tags.models import Tag class User(Base): __tablename__ = \"user\" id: Mapped[int] = mapped_column(Integer, primary_key=True) email: Mapped[str] = mapped_column(unique=True) hash_password: Mapped[str] tags: Mapped[list[Tag]] = relationship( 'Tag', secondary='user_tag', back_populates='users', lazy='selectin' )","title":"ORM-\u043c\u043e\u0434\u0435\u043b\u0438 (SQLAlchemy)"},{"location":"lab1/#get_all_users","text":"","title":"\u0412\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438 \u0432 \u043e\u0442\u0432\u0435\u0442\u0435 get_all_users"},{"location":"lab1/#crud-api","text":"\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u043d\u0430\u0431\u043e\u0440 CRUD-\u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u0432 \u0441 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0435\u0439 \u0442\u0438\u043f\u043e\u0432: \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 ( /user ): \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435, \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043f\u043e ID \u0438 email, \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435, \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435, \u043f\u0440\u0438\u0432\u044f\u0437\u043a\u0430 \u0442\u0435\u0433\u0430. \u0422\u0435\u0433\u0438 ( /tag ): \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435, \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445. \u0420\u0430\u0441\u0441\u044b\u043b\u043a\u0438 ( /newsletter ): \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441 \u043e\u0442\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0439 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u043e\u0439, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435, \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435, \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435.","title":"CRUD API"},{"location":"lab1/#_2","text":"\u0420\u043e\u0443\u0442\u0435\u0440 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u043c\u0435\u0442\u043e\u0434 \u0441\u0435\u0440\u0432\u0438\u0441\u0430 NewsletterService, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0441\u043d\u0430\u0447\u0430\u043b\u0430 Pydantic-\u043c\u043e\u0434\u0435\u043b\u044c NewsletterCreateRequest \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0432 DTO \u0447\u0435\u0440\u0435\u0437 model_validate \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442\u0441\u044f \u0432 \u0411\u0414, \u0437\u0430\u0442\u0435\u043c \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e tag_id \u0441\u043e\u0437\u0434\u0430\u0451\u0442\u0441\u044f \u0441\u0432\u044f\u0437\u044c \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 newsletter_tag. \u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u043f\u043e \u0442\u0435\u0433\u0430\u043c \u0440\u0430\u0441\u0441\u044b\u043b\u043a\u0438 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f user_tags_service.get_users_by_tag, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a email-\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u0435\u0439, \u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u043d\u0438\u0445 \u0447\u0435\u0440\u0435\u0437 send_letter.apply_async(..., eta=newsletter.target_time) \u0441\u0442\u0430\u0432\u0438\u0442\u0441\u044f \u043e\u0442\u043b\u043e\u0436\u0435\u043d\u043d\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430 \u0432 Celery.","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u0430 \u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u043d\u043e\u0433\u043e \u0441\u043b\u043e\u044f \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0440\u0430\u0441\u0441\u044b\u043b\u043a\u0438"},{"location":"lab1/#_3","text":"\u043e\u0442\u0432\u0435\u0447\u0430\u044e\u0449\u0438\u0445 \u0437\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0439 \u0440\u0430\u0441\u0441\u044b\u043b\u043a\u0438, \u043f\u0440\u0438\u0432\u044f\u0437\u043a\u0443 \u0442\u0435\u0433\u043e\u0432 \u0438 \u043f\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0443 \u043e\u0442\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u043d\u0430 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0443 \u043f\u0438\u0441\u0435\u043c \u0447\u0435\u0440\u0435\u0437 Celery. @router.post(\"\") async def create_newsletter( newsletter: NewsletterCreateRequest, service=Depends(get_newsletter_service), ) -> NewsletterResponse: created = await service.create_newsletter(newsletter) return created @dataclass class NewsletterService: newsletters: NewsletterRepo tags: TagRepo newsletter_tags: NewsletterTagRepo async def create_newsletter( self, newsletter: NewsletterCreateRequest, ) -> NewsletterResponse: create_dto = NewsletterCreate.model_validate(newsletter) created = await self.newsletters.create(create_dto) logger.info(created.model_dump()) for tag_id in newsletter.tags: dto = NewsletterTagCreate( tag=tag_id, newsletter=created.id, ) await self.newsletter_tags.create(dto) created = await self.newsletters.get(created.id) # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u043f\u043e \u0442\u0435\u0433\u0430\u043c \u0438 \u0441\u0440\u0430\u0437\u0443 \u0441\u0442\u0430\u0432\u0438\u043c \u0437\u0430\u0434\u0430\u0447\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 user_tags_service = get_user_tag_service() recipients = await user_tags_service.get_users_by_tag( tags=[tag.text for tag in created.tags] ) for recipient in recipients: message = MessageSchema( subject=created.subject, recipients=[recipient], # noqa body=created.text, subtype=MessageType.html ) send_letter.apply_async( args=(json_utils.dumps(message, cls=MessageSchemaEncoder),), eta=newsletter.target_time ) logging.getLogger(__name__).info(f\"Queued email to {recipient}\") return created","title":"\u041a\u043e\u0434 \u0440\u043e\u0443\u0442\u0435\u0440\u0430 \u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0433\u043e \u0441\u0435\u0440\u0432\u0438\u0441\u043d\u043e\u0433\u043e \u043c\u0435\u0442\u043e\u0434\u0430,"},{"location":"lab1/#alembic","text":"\u041f\u0440\u043e\u0435\u043a\u0442 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d \u043d\u0430 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 \u0447\u0435\u0440\u0435\u0437 Alembic.","title":"\u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439 (Alembic)"},{"location":"lab1/#_4","text":"\u0412\u043e \u0432\u0441\u0435\u0445 \u0440\u043e\u0443\u0442\u0435\u0440\u0430\u0445, \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u0445 \u0438 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044f\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0438 \u0438 ConfigDict(from_attributes=True) \u0434\u043b\u044f \u0447\u0442\u0435\u043d\u0438\u044f \u0438\u0437 ORM: @router.get(\"\") async def get_all_newsletter( newsletter_service = Depends(get_newsletter_service) ) -> list[NewsletterResponse]: res = await newsletter_service.get_all_newsletter() return res class NewsletterUpdate(BaseModel): text: str subject: str target_time: Optional[datetime] = None model_config = ConfigDict(from_attributes=True)","title":"\u0410\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044f \u0442\u0438\u043f\u043e\u0432"},{"location":"lab1/#_5","text":"\u251c\u2500\u2500 admin \u2502 \u251c\u2500\u2500 Dockerfile \u2502 \u251c\u2500\u2500 auth \u2502 \u2502 \u251c\u2500\u2500 auth_form.py \u2502 \u2502 \u251c\u2500\u2500 auth_helper.py \u2502 \u2502 \u251c\u2500\u2500 auth_service_interface.py \u2502 \u2502 \u251c\u2500\u2500 dependencies \u2502 \u2502 \u2502 \u2514\u2500\u2500 services.py \u2502 \u2502 \u251c\u2500\u2500 exceptions.py \u2502 \u2502 \u2514\u2500\u2500 schemas.py \u2502 \u251c\u2500\u2500 config.py \u2502 \u251c\u2500\u2500 main.py \u2502 \u251c\u2500\u2500 midlewares \u2502 \u2502 \u2514\u2500\u2500 auth_midleware.py \u2502 \u251c\u2500\u2500 requirements.txt \u2502 \u251c\u2500\u2500 routes \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 auth_routes.py \u2502 \u2502 \u251c\u2500\u2500 dependencies \u2502 \u2502 \u2502 \u2514\u2500\u2500 services.py \u2502 \u2502 \u251c\u2500\u2500 newsletter_router.py \u2502 \u2502 \u251c\u2500\u2500 tag_router.py \u2502 \u2502 \u2514\u2500\u2500 user_router.py \u2502 \u251c\u2500\u2500 services \u2502 \u2502 \u251c\u2500\u2500 auth_service.py \u2502 \u2502 \u251c\u2500\u2500 dependencies \u2502 \u2502 \u2502 \u2514\u2500\u2500 services.py \u2502 \u2502 \u251c\u2500\u2500 newsletter_service.py \u2502 \u2502 \u251c\u2500\u2500 schemas.py \u2502 \u2502 \u251c\u2500\u2500 tag_service.py \u2502 \u2502 \u2514\u2500\u2500 user_service.py \u2502 \u251c\u2500\u2500 static \u2502 \u2502 \u251c\u2500\u2500 css \u2502 \u2502 \u2502 \u251c\u2500\u2500 auth.css \u2502 \u2502 \u2502 \u251c\u2500\u2500 base.css \u2502 \u2502 \u2502 \u251c\u2500\u2500 newsletter.css \u2502 \u2502 \u2502 \u251c\u2500\u2500 newsletter_all.css \u2502 \u2502 \u2502 \u251c\u2500\u2500 newsletter_details.css \u2502 \u2502 \u2502 \u251c\u2500\u2500 tag.css \u2502 \u2502 \u2502 \u251c\u2500\u2500 tags.css \u2502 \u2502 \u2502 \u251c\u2500\u2500 user.css \u2502 \u2502 \u2502 \u251c\u2500\u2500 user_newsletters.css \u2502 \u2502 \u2502 \u2514\u2500\u2500 users.css \u2502 \u2502 \u2514\u2500\u2500 images \u2502 \u2502 \u2514\u2500\u2500 \u043a\u0438\u0442\u0442\u0438.jpeg \u2502 \u2514\u2500\u2500 templates \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 auth.html \u2502 \u251c\u2500\u2500 base.html \u2502 \u251c\u2500\u2500 newsletter.html \u2502 \u251c\u2500\u2500 newsletter_all.html \u2502 \u251c\u2500\u2500 newsletter_details.html \u2502 \u251c\u2500\u2500 signup.html \u2502 \u251c\u2500\u2500 tag.html \u2502 \u251c\u2500\u2500 tag_all.html \u2502 \u251c\u2500\u2500 user.html \u2502 \u251c\u2500\u2500 user_all.html \u2502 \u2514\u2500\u2500 user_newsletters.html \u251c\u2500\u2500 backend \u2502 \u251c\u2500\u2500 Dockerfile \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 abstractions \u2502 \u2502 \u251c\u2500\u2500 AbstractRepoInterface.py \u2502 \u2502 \u251c\u2500\u2500 AbstractRepository.py \u2502 \u2502 \u2514\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 alembic.ini \u2502 \u251c\u2500\u2500 celery_tasks \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 setup_celery.py \u2502 \u2502 \u2514\u2500\u2500 tasks.py \u2502 \u251c\u2500\u2500 config.py \u2502 \u251c\u2500\u2500 db \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2514\u2500\u2500 database.py \u2502 \u251c\u2500\u2500 decoder.py \u2502 \u251c\u2500\u2500 docker \u2502 \u2502 \u2514\u2500\u2500 start_only_db.bat \u2502 \u251c\u2500\u2500 mail.env \u2502 \u251c\u2500\u2500 mail.env.example \u2502 \u251c\u2500\u2500 main.py \u2502 \u251c\u2500\u2500 migrations \u2502 \u2502 \u251c\u2500\u2500 README \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 env.py \u2502 \u2502 \u251c\u2500\u2500 script.py.mako \u2502 \u2502 \u2514\u2500\u2500 versions \u2502 \u2502 \u251c\u2500\u2500 0db08c43dc72_add_timestamp_with_timezone.py \u2502 \u2502 \u251c\u2500\u2500 556eade48481_newsletter_target_time.py \u2502 \u2502 \u251c\u2500\u2500 5e3728acfa88_first.py \u2502 \u2502 \u251c\u2500\u2500 864ebd0009a9_third.py \u2502 \u2502 \u251c\u2500\u2500 98b03d0a93c1_second.py \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 cf77bb0027a1_add_userlogin.py \u2502 \u2502 \u2514\u2500\u2500 d65fdbfa9353_add_unique_to_emails.py \u2502 \u251c\u2500\u2500 newsletter \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 delayed_letter_service.py \u2502 \u2502 \u251c\u2500\u2500 dependencies \u2502 \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 repositories.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 services.py \u2502 \u2502 \u251c\u2500\u2500 models.py \u2502 \u2502 \u251c\u2500\u2500 newsletter_service.py \u2502 \u2502 \u251c\u2500\u2500 repository.py \u2502 \u2502 \u251c\u2500\u2500 router.py \u2502 \u2502 \u2514\u2500\u2500 schemas.py \u2502 \u251c\u2500\u2500 newsletter_tag \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 dependencies \u2502 \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 repositories.py \u2502 \u2502 \u251c\u2500\u2500 models.py \u2502 \u2502 \u251c\u2500\u2500 repository.py \u2502 \u2502 \u2514\u2500\u2500 schemas.py \u2502 \u251c\u2500\u2500 requirements.txt \u2502 \u251c\u2500\u2500 tags \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 dependencies \u2502 \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 repositories.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 services.py \u2502 \u2502 \u251c\u2500\u2500 models.py \u2502 \u2502 \u251c\u2500\u2500 repository.py \u2502 \u2502 \u251c\u2500\u2500 router.py \u2502 \u2502 \u251c\u2500\u2500 schemas.py \u2502 \u2502 \u2514\u2500\u2500 tag_service.py \u2502 \u251c\u2500\u2500 user \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 dependencies \u2502 \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 repositories.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 services.py \u2502 \u2502 \u251c\u2500\u2500 models.py \u2502 \u2502 \u251c\u2500\u2500 repository.py \u2502 \u2502 \u251c\u2500\u2500 router.py \u2502 \u2502 \u251c\u2500\u2500 schemas.py \u2502 \u2502 \u2514\u2500\u2500 user_service.py \u2502 \u251c\u2500\u2500 user_newsletter \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 models.py \u2502 \u2502 \u251c\u2500\u2500 repository.py \u2502 \u2502 \u2514\u2500\u2500 schemas.py \u2502 \u2514\u2500\u2500 user_tag \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 dependencies \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 repositories.py \u2502 \u2502 \u2514\u2500\u2500 services.py \u2502 \u251c\u2500\u2500 models.py \u2502 \u251c\u2500\u2500 repository.py \u2502 \u251c\u2500\u2500 schemas.py \u2502 \u2514\u2500\u2500 user_tag_service.py \u2514\u2500\u2500 docker-compose.yml","title":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430"},{"location":"lab1/#_6","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 JWT-\u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0438 \u0445\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u043e\u043b\u0435\u0439 \u0447\u0435\u0440\u0435\u0437 bcrypt . \u041f\u0440\u0438\u043c\u0435\u0440 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0432 AuthService : def hash_password(password: str) -> str: return bcrypt.hashpw(password.encode(), bcrypt.gensalt()).decode() def check_password(password: str, hashed: str) -> bool: return bcrypt.checkpw(password.encode(), hashed.encode()) def _generate_tokens(self, user_id: int) -> Tokens: now = datetime.now(tz=timezone.utc) exp = now + timedelta(seconds=self.auth_settings.access_token_lifetime_seconds) token = jwt.encode({'exp': exp, 'user_id': user_id}, key=self.auth_settings.secret_key.get_secret_value(), algorithm='HS256') return Tokens(access_token=token) \u041f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u043e\u0435 midleware \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0438 \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0441\u0442\u044c JWT \u0432 cookie \u0438 \u043f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u043b\u043e\u0433\u0438\u043d\u0430 \u043f\u0440\u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0438: async def check_for_auth(request: Request, call_next): tokens = Tokens(access_token=request.cookies.get(\"access_token\", \"\")) valid = await auth_service.check_tokens(tokens) if not valid[\"is_valid\"]: return RedirectResponse(f\"/auth?destination={request.url.path}\", status_code=303) request.state.user_id = valid[\"user_id\"] return await call_next(request) \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 FastAPI + Jinja2: \u0432\u0441\u0435 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u043e\u0444\u043e\u0440\u043c\u043b\u0435\u043d\u044b \u0447\u0435\u0440\u0435\u0437 HTML-\u0448\u0430\u0431\u043b\u043e\u043d\u044b \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c\u044b\u0435 \u0444\u0430\u0439\u043b\u044b CSS. \u041f\u0440\u0438\u043c\u0435\u0440 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0432\u0445\u043e\u0434\u0430: \u041f\u0440\u0438\u043c\u0435\u0440 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0440\u0430\u0441\u0441\u044b\u043b\u043a\u0438 \u041f\u0440\u0438\u043c\u0435\u0440 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u043c\u043e\u0438\u0445 \u0440\u0430\u0441\u0441\u044b\u043b\u043e\u043a","title":"\u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0438 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c"},{"location":"lab2/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430: \u041f\u043e\u0442\u043e\u043a\u0438, \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u0432 Python \u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b \u041f\u043e\u043d\u044f\u0442\u044c \u043e\u0442\u043b\u0438\u0447\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u043f\u043e\u0442\u043e\u043a\u0430\u043c\u0438 \u0438 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438 \u0438 \u043f\u043e\u043d\u044f\u0442\u044c, \u0447\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \u0430\u0441\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u0432 Python. \u0420\u0430\u0431\u043e\u0442\u0430 \u043e \u043f\u043e\u0442\u043e\u043a\u0430\u0445, \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u0445 \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u0438 \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430\u043c \u0440\u0430\u0437\u0432\u0438\u0442\u044c \u043d\u0430\u0432\u044b\u043a\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u0438 \u0431\u044b\u0441\u0442\u0440\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c, \u0447\u0442\u043e \u0432\u0430\u0436\u043d\u043e \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c\u0438 \u043e\u0431\u044a\u0435\u043c\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439. \u042d\u0442\u043e\u0442 \u043e\u043f\u044b\u0442 \u0442\u0430\u043a\u0436\u0435 \u043f\u043e\u0434\u0433\u043e\u0442\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432 \u043a \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c, \u0433\u0434\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u0438 \u0434\u043b\u044f \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u043b\u0438 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u0432\u043d\u0435\u0448\u043d\u0438\u043c\u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438. \u0412\u043e\u043f\u0440\u043e\u0441\u044b \u043f\u0440\u043e \u043f\u043e\u0442\u043e\u043a\u0438, \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b \u0438 \u0430\u0441\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0442\u0441\u044f, \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c, \u043d\u0430 \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u0435 \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0439 \u043d\u0430 python-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u0443\u0440\u043e\u0432\u043d\u044f middle \u0438 \u0412\u044b\u0448\u0435. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 1: \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 threading, multiprocessing \u0438 asyncio \u043f\u0440\u0438 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0438 \u0441\u0443\u043c\u043c\u044b \u0447\u0438\u0441\u0435\u043b \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 10 000 000 . \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0442\u0440\u0438 \u0441\u043a\u0440\u0438\u043f\u0442\u0430, \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u044d\u0442\u0443 \u0437\u0430\u0434\u0430\u0447\u0443 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f: 1. \u041c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c (\u043c\u043e\u0434\u0443\u043b\u044c threading ) 2. \u041c\u043d\u043e\u0433\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043d\u043e\u0441\u0442\u044c (\u043c\u043e\u0434\u0443\u043b\u044c multiprocessing ) 3. \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c (\u043c\u043e\u0434\u0443\u043b\u044c asyncio ) \u0417\u0430\u0434\u0430\u0447\u0430 1. \u0421\u0443\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 1 000 000 000 \u0412 \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435 \u043c\u044b \u0440\u0430\u0437\u0431\u0438\u043b\u0438 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d [1\u2026N] \u043d\u0430 4 \u0440\u0430\u0432\u043d\u044b\u0435 \u0447\u0430\u0441\u0442\u0438 \u0438 \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u043b\u0438 \u0441\u0443\u043c\u043c\u0443 \u043a\u0430\u0436\u0434\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e \u0440\u0430\u0437\u043d\u044b\u043c\u0438 \u0441\u043f\u043e\u0441\u043e\u0431\u0430\u043c\u0438. \u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0441\u043b\u043e\u0436\u0438\u043b\u0438 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u044b\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0438 \u0438\u0437\u043c\u0435\u0440\u0438\u043b\u0438 \u043e\u0431\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u0440\u0430\u0431\u043e\u0442\u044b. 1. Threading (\u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c) \u041a\u043e\u0434: \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043c\u043e\u0434\u0443\u043b\u044c threading . 1. \u0414\u0435\u043b\u0438\u043c \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u043d\u0430 4 \u043e\u0442\u0440\u0435\u0437\u043a\u0430. 2. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043e\u0442\u0440\u0435\u0437\u043a\u0430 \u0441\u043e\u0437\u0434\u0430\u0451\u043c \u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c Thread(target=partial_sum, args=(start, end, idx)) . 3. \u041a\u0430\u0436\u0434\u044b\u0439 \u043f\u043e\u0442\u043e\u043a \u0432 \u0441\u0432\u043e\u0451\u043c \u0446\u0438\u043a\u043b\u0435 \u0441\u0447\u0438\u0442\u0430\u0435\u0442 \u0441\u0443\u043c\u043c\u0443 \u0447\u0438\u0441\u0435\u043b \u0438 \u043a\u043b\u0430\u0434\u0451\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432 \u043e\u0431\u0449\u0438\u0439 \u0441\u043f\u0438\u0441\u043e\u043a partial_sums[idx] . 4. \u0412 \u0433\u043b\u0430\u0432\u043d\u043e\u043c \u043f\u043e\u0442\u043e\u043a\u0435 \u0436\u0434\u0451\u043c join() \u0432\u0441\u0435\u0445 \u043f\u043e\u0442\u043e\u043a\u043e\u0432, \u0441\u0443\u043c\u043c\u0438\u0440\u0443\u0435\u043c partial_sums \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0432\u0440\u0435\u043c\u044f. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u0430: - \u041f\u043e\u0442\u043e\u043a\u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u044e\u0442 \u043f\u0430\u043c\u044f\u0442\u044c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 \u2014 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0441\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0435\u043c \u0432 \u043e\u0431\u0449\u0438\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0431\u0435\u0437 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438. - GIL \u043d\u0435 \u0434\u0430\u0451\u0442 \u043f\u043e\u0442\u043e\u043a\u0430\u043c \u0440\u0435\u0430\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u043d\u044f\u0442\u044c\u0441\u044f \u043d\u0430 \u0440\u0430\u0437\u043d\u044b\u0445 \u044f\u0434\u0440\u0430\u0445 \u0434\u043b\u044f CPU-bound \u0437\u0430\u0434\u0430\u0447, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0432\u044b\u0438\u0433\u0440\u044b\u0448\u0430 \u043f\u043e \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u0438 \u043d\u0435\u0442. - \u041f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f I/O-bound \u0437\u0430\u0434\u0430\u0447, \u043d\u043e \u043d\u0435 \u0434\u043b\u044f \u0442\u044f\u0436\u0451\u043b\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439. 2. Multiprocessing (\u043c\u043d\u043e\u0433\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043d\u043e\u0441\u0442\u044c) \u041a\u043e\u0434: \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043c\u043e\u0434\u0443\u043b\u044c multiprocessing.Pool . 1. \u0414\u0435\u043b\u0438\u043c \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u043d\u0430 4 \u043a\u043e\u0440\u0442\u0435\u0436\u0430 (start, end) . 2. \u0421\u043e\u0437\u0434\u0430\u0451\u043c Pool(processes=4) \u0438 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u043c pool.starmap(partial_sum_range, ranges) . 3. \u041a\u0430\u0436\u0434\u044b\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e \u0441\u0447\u0438\u0442\u0430\u0435\u0442 \u0441\u0432\u043e\u044e \u0447\u0430\u0441\u0442\u044c \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u0443\u044e \u0441\u0443\u043c\u043c\u0443. 4. \u0412 \u0433\u043b\u0430\u0432\u043d\u043e\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u0441\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0435\u043c \u0432\u0441\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0438 \u0438\u0437\u043c\u0435\u0440\u044f\u0435\u043c \u0432\u0440\u0435\u043c\u044f. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u0430: - \u041a\u0430\u0436\u0434\u044b\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u2014 \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440 Python \u0441 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c GIL, \u0447\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0435\u043c\u0443 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u0438\u0437\u043c\u0443 \u043d\u0430 \u043c\u043d\u043e\u0433\u043e\u0437\u0430\u0434\u0430\u0447\u043d\u044b\u0445 CPU. - \u041e\u0431\u043c\u0435\u043d \u0434\u0430\u043d\u043d\u044b\u0445 \u0447\u0435\u0440\u0435\u0437 \u0432\u043e\u0437\u0432\u0440\u0430\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0438\u0437 starmap , \u043d\u0435 \u0447\u0435\u0440\u0435\u0437 \u043e\u0431\u0449\u0443\u044e \u043f\u0430\u043c\u044f\u0442\u044c. - \u041b\u0443\u0447\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f CPU-bound \u0437\u0430\u0434\u0430\u0447. 3. AsyncIO (\u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c) \u041a\u043e\u0434: \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 asyncio \u0438 \u043a\u043e\u0440\u0443\u0442\u0438\u043d\u044b. 1. \u0414\u0435\u043b\u0438\u043c \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u043d\u0430 4 \u0447\u0430\u0441\u0442\u0438. 2. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0441\u043e\u0437\u0434\u0430\u0451\u043c \u043a\u043e\u0440\u0443\u0442\u0438\u043d\u0443 partial_sum_async(start, end) , \u0432\u043d\u0443\u0442\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043a\u0430\u0436\u0434\u044b\u0435 1 000 000 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0439 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f await asyncio.sleep(0) \u0447\u0442\u043e\u0431\u044b \u0443\u0441\u0442\u0443\u043f\u0438\u0442\u044c \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435. 3. \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0432\u0441\u0435 \u043a\u043e\u0440\u0443\u0442\u0438\u043d\u044b \u0447\u0435\u0440\u0435\u0437 asyncio.create_task(...) \u0438 \u0436\u0434\u0451\u043c \u0438\u0445 \u0432\u043c\u0435\u0441\u0442\u0435 \u0432 await asyncio.gather(...) . 4. \u0421\u0443\u043c\u043c\u0438\u0440\u0443\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0438 \u0437\u0430\u043c\u0435\u0440\u044f\u0435\u043c \u0432\u0440\u0435\u043c\u044f. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u0430: - \u0412\u0441\u0435 \u043a\u043e\u0440\u0443\u0442\u0438\u043d\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u0432 \u043e\u0434\u043d\u043e\u043c \u043f\u043e\u0442\u043e\u043a\u0435, \u0438 \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438 \u043a\u043e\u043e\u043f\u0435\u0440\u0430\u0442\u0438\u0432\u043d\u043e\u0435. - \u0414\u043b\u044f CPU-bound \u0437\u0430\u0434\u0430\u0447 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u043d\u0435 \u0434\u0430\u0451\u0442 \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f: \u0446\u0438\u043a\u043b \u0441\u043e\u0431\u044b\u0442\u0438\u0439 \u0431\u043b\u043e\u043a\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0442\u044f\u0436\u0451\u043b\u044b\u043c\u0438 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f\u043c\u0438. - \u042d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u0435\u043d \u0442\u043e\u043b\u043a\u043e \u0432 \u0441\u043e\u0447\u0435\u0442\u0430\u043d\u0438\u0438 \u0441 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c\u0438 I/O-\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u043c\u0438. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0438 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 (\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1) \u0414\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u043c \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432 \u043d\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 1_000_000_000, \u0447\u0442\u043e\u0431\u044b \u0443\u043b\u043e\u0436\u0438\u0442\u044c\u0441\u044f \u0432 \u0440\u0430\u0437\u0443\u043c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f. \u041f\u043e\u0434\u0445\u043e\u0434 \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u041c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e ( threading , 4 \u043f\u043e\u0442\u043e\u043a\u0430) 19.58 seconds (\u043d\u0435 \u0443\u0441\u043a\u043e\u0440\u044f\u0435\u0442\u0441\u044f) \u041c\u043d\u043e\u0433\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043d\u043e ( multiprocessing , 4 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430) 6.51 seconds (\u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u0432 4 \u0440\u0430\u0437\u0430 \u0431\u044b\u0441\u0442\u0440\u0435\u0435) AsyncIO (4 \u0437\u0430\u0434\u0430\u0447\u0438) 20.12 seconds (\u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e \u043e\u0434\u043d\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e) \u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 \u043a \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c Multiprocessing \u043f\u043e\u043a\u0430\u0437\u0430\u043b \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u0435 , \u0442\u0430\u043a \u043a\u0430\u043a \u043a\u0430\u0436\u0434\u044b\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0440\u0430\u0431\u043e\u0442\u0430\u043b \u043d\u0430 \u0441\u0432\u043e\u0451\u043c \u044f\u0434\u0440\u0435 \u0431\u0435\u0437 GIL-\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0439. Threading \u0438 AsyncIO \u0434\u0430\u043b\u0438 \u0431\u043b\u0438\u0437\u043a\u0438\u0435 \u043f\u043e \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b: GIL \u0438 \u043e\u0434\u043d\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u044b\u0439 event loop \u043d\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u0440\u0430\u0441\u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u0438\u0442\u044c \u0447\u0438\u0441\u0442\u043e \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u0434. \u0414\u043b\u044f CPU-bound \u0437\u0430\u0434\u0430\u0447 \u0432\u044b\u0431\u043e\u0440 \u043e\u0447\u0435\u0432\u0438\u0434\u0435\u043d: multiprocessing . \u041f\u043e\u0442\u043e\u043a\u0438 \u0438 asyncio \u0437\u0434\u0435\u0441\u044c \u0438\u0437\u0431\u044b\u0442\u043e\u0447\u043d\u044b \u0438 \u0434\u0430\u0436\u0435 \u0447\u0443\u0442\u044c \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u0435\u0435 (\u0438\u0437-\u0437\u0430 \u043d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0445 \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432). \u0412\u044b\u0432\u043e\u0434 \u043f\u043e \u0437\u0430\u0434\u0430\u0447\u0435 1: \u0414\u043b\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0437\u0430\u0442\u0440\u0430\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 (\u0441\u0443\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0431\u043e\u043b\u044c\u0448\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0447\u0438\u0441\u0435\u043b) \u043c\u043e\u0434\u0435\u043b\u044c \u043c\u043d\u043e\u0433\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043d\u043e\u0441\u0442\u0438 \u0432\u044b\u0438\u0433\u0440\u044b\u0432\u0430\u0435\u0442, \u0442\u0430\u043a \u043a\u0430\u043a \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u044f\u0434\u0435\u0440 \u0438 \u043e\u0431\u0445\u043e\u0434\u0438\u0442 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 GIL. \u041c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0435 \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0432 CPython \u043d\u0435 \u043c\u043e\u0433\u0443\u0442 \u0443\u0441\u043a\u043e\u0440\u0438\u0442\u044c \u0442\u0430\u043a\u0438\u0435 \u0440\u0430\u0441\u0447\u0451\u0442\u044b \u0438 \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0438 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0442\u0443 \u0436\u0435 \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c, \u0447\u0442\u043e \u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u0434. \u0418\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f CPU-bound \u0437\u0430\u0434\u0430\u0447\u0438 \u043d\u0435\u043e\u043f\u0440\u0430\u0432\u0434\u0430\u043d\u043d\u043e \u2013 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0448\u0435, \u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043d\u0435 \u043b\u0443\u0447\u0448\u0435. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 2: \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0432 SQLite \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0442\u0440\u0438 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430 \u0441\u043a\u0440\u0438\u043f\u0442\u0430, \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u044e\u0449\u0435\u0433\u043e \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0438 \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u044e\u0449\u0435\u0433\u043e \u0441 \u043d\u0438\u0445 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 HTML ( <title> ), \u0441 \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0432 \u0431\u0430\u0437\u0443 SQLite. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u044d\u0442\u0438 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c: 1. threading (\u043f\u043e\u0442\u043e\u043a\u0438) 2. multiprocessing (\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b) 3. asyncio (\u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b, \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 aiohttp) \u0412 \u044d\u0442\u043e\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u043c\u044b \u0441\u0434\u0435\u043b\u0430\u043b\u0438 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430 \u0438\u0437 15 URL \u0441 \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435\u043c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0442\u0435\u0433\u0430 <title> \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u043b\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0432 \u043e\u0434\u043d\u0443 \u0438 \u0442\u0443 \u0436\u0435 \u0431\u0430\u0437\u0443 SQLite. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043b\u0438 \u0442\u0440\u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u0430 \u2014 threading , multiprocessing \u0438 asyncio \u2014 \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u043b\u0438 \u0432\u0440\u0435\u043c\u044f \u043f\u043e\u043b\u043d\u043e\u0433\u043e \u0446\u0438\u043a\u043b\u0430 \u00ab\u0437\u0430\u043f\u0440\u043e\u0441 \u2192 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u2192 \u0437\u0430\u043f\u0438\u0441\u044c\u00bb. 1. Threading (\u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c) \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u043e\u0434\u0430 \u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u0430: - \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e URL \u0441\u043e\u0437\u0434\u0430\u0451\u0442\u0441\u044f \u043f\u043e\u0442\u043e\u043a threading.Thread , \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441 requests.get() . - \u041a\u043e\u0433\u0434\u0430 \u043f\u043e\u0442\u043e\u043a \u0436\u0434\u0451\u0442 \u043e\u0442\u0432\u0435\u0442\u0430 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430, GIL \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043e\u0441\u0432\u043e\u0431\u043e\u0436\u0434\u0430\u0435\u0442\u0441\u044f, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044f \u0434\u0440\u0443\u0433\u0438\u043c \u043f\u043e\u0442\u043e\u043a\u0430\u043c \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c. - \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u044e\u0442\u0441\u044f \u0432 \u043e\u0431\u0449\u0438\u0439 \u0441\u043f\u0438\u0441\u043e\u043a results . - \u041f\u043e\u0441\u043b\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u043f\u043e\u0442\u043e\u043a\u043e\u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043f\u043e\u0442\u043e\u043a \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 sqlite3 \u0438 \u0432\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0432\u0441\u0435 \u0437\u0430\u043f\u0438\u0441\u0438 \u043e\u0434\u043d\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0435\u0439 executemany . \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438: - \u041f\u043e\u0442\u043e\u043a\u0438 \u043b\u0435\u0433\u043a\u043e \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c: \u043a\u043e\u0434 \u043f\u043e\u0447\u0442\u0438 \u043d\u0435 \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u043e\u0431\u044b\u0447\u043d\u043e\u0433\u043e \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e. - \u041f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447 \u0441 \u0432\u0432\u043e\u0434\u043e\u043c-\u0432\u044b\u0432\u043e\u0434\u043e\u043c (I/O-bound): \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e. 2. Multiprocessing (\u043c\u043d\u043e\u0433\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043d\u043e\u0441\u0442\u044c) \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u043e\u0434\u0430 \u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u0430: - \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f multiprocessing.Pool \u0441 \u0447\u0438\u0441\u043b\u043e\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432, \u0440\u0430\u0432\u043d\u044b\u043c \u0447\u0438\u0441\u043b\u0443 URL (15). - \u041a\u0430\u0436\u0434\u044b\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u044e fetch_title(url) , \u0434\u0435\u043b\u0430\u0435\u0442 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441 \u0447\u0435\u0440\u0435\u0437 requests \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043a\u043e\u0440\u0442\u0435\u0436 (url, title) . - \u0412 \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u043f\u043e\u0441\u043b\u0435 pool.map \u0441\u043e\u0431\u0438\u0440\u0430\u044e\u0442\u0441\u044f \u0432\u0441\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0438 \u0432\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0432 SQLite. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438: - \u041a\u0430\u0436\u0434\u044b\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u2014 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440 Python, \u0441\u0432\u043e\u0439 GIL \u0438 \u0441\u0432\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u044b\u0439 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442. - \u041f\u0440\u043e\u0446\u0435\u0441\u0441\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e \u043d\u0430 \u0440\u0430\u0437\u043d\u044b\u0445 \u044f\u0434\u0440\u0430\u0445. 3. AsyncIO (\u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c) \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u043e\u0434\u0430 \u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u0430: - \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f aiohttp.ClientSession \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. - \u0412\u0441\u0435 15 \u043a\u043e\u0440\u0443\u0442\u0438\u043d fetch_title(session, url) \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u044e\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 asyncio.gather \u0432 \u043e\u0434\u043d\u043e\u043c \u043f\u043e\u0442\u043e\u043a\u0435. - \u0411\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044f await \u043d\u0430 \u0441\u0435\u0442\u0435\u0432\u043e\u043c \u0432\u0432\u043e\u0434\u0435-\u0432\u044b\u0432\u043e\u0434\u0435 \u043a\u043e\u0440\u0443\u0442\u0438\u043d\u044b \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0430\u044e\u0442\u0441\u044f \u043e\u0434\u043d\u0430 \u043d\u0430 \u0434\u0440\u0443\u0433\u0443\u044e \u0431\u0435\u0437 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u043e\u0442\u043e\u043a\u043e\u0432 \u0438\u043b\u0438 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432. - \u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e \u0447\u0435\u0440\u0435\u0437 aiosqlite , \u0447\u0442\u043e \u043d\u0435 \u0431\u043b\u043e\u043a\u0438\u0440\u0443\u0435\u0442 event loop. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438: - \u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u043d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0435 \u0440\u0430\u0441\u0445\u043e\u0434\u044b \u043d\u0430 \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438. - \u041e\u0442\u043b\u0438\u0447\u043d\u043e \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043d\u0430 \u0442\u044b\u0441\u044f\u0447\u0438 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439, \u043f\u043e\u0442\u0440\u0435\u0431\u043b\u044f\u0435\u0442 \u043c\u0430\u043b\u043e \u043f\u0430\u043c\u044f\u0442\u0438. - \u042d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u0435\u043d \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0434\u043b\u044f I/O-bound \u0437\u0430\u0434\u0430\u0447. \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u041f\u043e\u0434\u0445\u043e\u0434 \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u0441 Threading 0.58 Multiprocessing 1.87 AsyncIO 0.65 \u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 \u043a \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c: - Threading \u043f\u043e\u043a\u0430\u0437\u0430\u043b \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0435\u0435 \u0432\u0440\u0435\u043c\u044f (0.58 \u0441): \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 I/O-bound \u0437\u0430\u0434\u0430\u0447 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043a\u043b\u0438\u0435\u043d\u0442 requests \u043e\u0447\u0435\u043d\u044c \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u0435\u043d. - AsyncIO \u043e\u0442\u0441\u0442\u0430\u043b \u043d\u0435\u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e (0.65 \u0441): \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043a\u043b\u0438\u0435\u043d\u0442 aiohttp \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 aiosqlite \u0434\u0430\u044e\u0442 \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0438\u0435 \u043d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0435 \u0440\u0430\u0441\u0445\u043e\u0434\u044b \u043d\u0430 \u0446\u0438\u043a\u043b \u0441\u043e\u0431\u044b\u0442\u0438\u0439, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0432\u0440\u0435\u043c\u044f \u0447\u0443\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435. - Multiprocessing \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0438 \u0441\u0430\u043c\u043e\u0435 \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u043e\u0435 (1.87 \u0441): \u0441\u043e\u0437\u0434\u0430\u0451\u0442\u0441\u044f 15 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 (\u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u043d\u0430 URL), \u0447\u0442\u043e \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043d\u0430 \u0441\u0442\u0430\u0440\u0442 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0443 \u0438\u0445 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441. \u0412\u044b\u0432\u043e\u0434 \u043f\u043e \u0437\u0430\u0434\u0430\u0447\u0435 2: \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441\u0438\u043b\u044c\u043d\u043e \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e. \u0418\u0437 \u0442\u0440\u0451\u0445 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: Threading \u043e\u043a\u0430\u0437\u0430\u043b\u0441\u044f \u0441\u0430\u043c\u044b\u043c \u0431\u044b\u0441\u0442\u0440\u044b\u043c \u043f\u0440\u0438 15 \u0441\u0441\u044b\u043b\u043a\u0430\u0445 \u2014 \u043f\u0440\u043e\u0441\u0442\u043e \u0441\u043e\u0437\u0434\u0430\u0451\u0448\u044c \u043f\u043e\u0442\u043e\u043a\u0438 \u0438 \u0441\u0440\u0430\u0437\u0443 \u0434\u0435\u043b\u0430\u0435\u0448\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b. AsyncIO \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0438\u0433\u0440\u0430\u043b, \u043d\u043e \u0442\u043e\u0436\u0435 \u0431\u044b\u0441\u0442\u0440\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0438 \u043b\u0435\u0433\u043a\u043e \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043d\u0430 \u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u0447\u0438\u0441\u043b\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. Multiprocessing \u0432 \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435 \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u0435\u0435 \u0438\u0437-\u0437\u0430 \u0437\u0430\u0442\u0440\u0430\u0442 \u043d\u0430 \u0437\u0430\u043f\u0443\u0441\u043a \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432. \u0418\u0442\u043e\u0433: \u0434\u043b\u044f \u0441\u0435\u0442\u0435\u0432\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043b\u0443\u0447\u0448\u0435 \u0431\u0440\u0430\u0442\u044c \u043f\u043e\u0442\u043e\u043a\u0438 \u0438\u043b\u0438 asyncio. \u041f\u0440\u043e\u0446\u0435\u0441\u0441\u044b \u0437\u0434\u0435\u0441\u044c \u043d\u0438 \u043a \u0447\u0435\u043c\u0443. \u041e\u0431\u0449\u0438\u0435 \u0432\u044b\u0432\u043e\u0434\u044b Multiprocessing : \u0431\u044b\u0441\u0442\u0440\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0442\u044f\u0436\u0451\u043b\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u0432\u0441\u0435\u0445 \u044f\u0434\u0440\u0430\u0445, \u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0451\u0442 \u043c\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 \u0438 \u0435\u0441\u0442 \u0431\u043e\u043b\u044c\u0448\u0435 \u043f\u0430\u043c\u044f\u0442\u0438. Threading : \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0441\u0435\u0442\u0435\u0432\u044b\u0435 \u0438 \u0444\u0430\u0439\u043b\u043e\u0432\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043d\u043e \u0432 \u0442\u044f\u0436\u0451\u043b\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f\u0445 \u043d\u0435 \u0443\u0441\u043a\u043e\u0440\u044f\u0435\u0442 \u0438\u0437-\u0437\u0430 GIL. AsyncIO : \u043e\u0442\u043b\u0438\u0447\u043d\u043e \u0441\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u0447\u0438\u0441\u043b\u043e\u043c \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 I/O-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0431\u0435\u0437 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u043e\u0442\u043e\u043a\u043e\u0432, \u043d\u043e \u043d\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439.","title":"Lab 2"},{"location":"lab2/#python","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430: \u041f\u043e\u0442\u043e\u043a\u0438, \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u0432 Python"},{"location":"lab2/#_1","text":"\u041f\u043e\u043d\u044f\u0442\u044c \u043e\u0442\u043b\u0438\u0447\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u043f\u043e\u0442\u043e\u043a\u0430\u043c\u0438 \u0438 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438 \u0438 \u043f\u043e\u043d\u044f\u0442\u044c, \u0447\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \u0430\u0441\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u0432 Python. \u0420\u0430\u0431\u043e\u0442\u0430 \u043e \u043f\u043e\u0442\u043e\u043a\u0430\u0445, \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u0445 \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u0438 \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430\u043c \u0440\u0430\u0437\u0432\u0438\u0442\u044c \u043d\u0430\u0432\u044b\u043a\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u0438 \u0431\u044b\u0441\u0442\u0440\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c, \u0447\u0442\u043e \u0432\u0430\u0436\u043d\u043e \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c\u0438 \u043e\u0431\u044a\u0435\u043c\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439. \u042d\u0442\u043e\u0442 \u043e\u043f\u044b\u0442 \u0442\u0430\u043a\u0436\u0435 \u043f\u043e\u0434\u0433\u043e\u0442\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432 \u043a \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c, \u0433\u0434\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u0438 \u0434\u043b\u044f \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u043b\u0438 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u0432\u043d\u0435\u0448\u043d\u0438\u043c\u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438. \u0412\u043e\u043f\u0440\u043e\u0441\u044b \u043f\u0440\u043e \u043f\u043e\u0442\u043e\u043a\u0438, \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b \u0438 \u0430\u0441\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0442\u0441\u044f, \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c, \u043d\u0430 \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u0435 \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0439 \u043d\u0430 python-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u0443\u0440\u043e\u0432\u043d\u044f middle \u0438 \u0412\u044b\u0448\u0435.","title":"\u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"lab2/#1-threading-multiprocessing-asyncio","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 10 000 000 . \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0442\u0440\u0438 \u0441\u043a\u0440\u0438\u043f\u0442\u0430, \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u044d\u0442\u0443 \u0437\u0430\u0434\u0430\u0447\u0443 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f: 1. \u041c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c (\u043c\u043e\u0434\u0443\u043b\u044c threading ) 2. \u041c\u043d\u043e\u0433\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043d\u043e\u0441\u0442\u044c (\u043c\u043e\u0434\u0443\u043b\u044c multiprocessing ) 3. \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c (\u043c\u043e\u0434\u0443\u043b\u044c asyncio )","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1: \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 threading, multiprocessing \u0438 asyncio \u043f\u0440\u0438 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0438 \u0441\u0443\u043c\u043c\u044b \u0447\u0438\u0441\u0435\u043b"},{"location":"lab2/#1-1-1-000-000-000","text":"\u0412 \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435 \u043c\u044b \u0440\u0430\u0437\u0431\u0438\u043b\u0438 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d [1\u2026N] \u043d\u0430 4 \u0440\u0430\u0432\u043d\u044b\u0435 \u0447\u0430\u0441\u0442\u0438 \u0438 \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u043b\u0438 \u0441\u0443\u043c\u043c\u0443 \u043a\u0430\u0436\u0434\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e \u0440\u0430\u0437\u043d\u044b\u043c\u0438 \u0441\u043f\u043e\u0441\u043e\u0431\u0430\u043c\u0438. \u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0441\u043b\u043e\u0436\u0438\u043b\u0438 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u044b\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0438 \u0438\u0437\u043c\u0435\u0440\u0438\u043b\u0438 \u043e\u0431\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u0440\u0430\u0431\u043e\u0442\u044b.","title":"\u0417\u0430\u0434\u0430\u0447\u0430 1. \u0421\u0443\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 1 000 000 000"},{"location":"lab2/#1-threading","text":"\u041a\u043e\u0434: \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043c\u043e\u0434\u0443\u043b\u044c threading . 1. \u0414\u0435\u043b\u0438\u043c \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u043d\u0430 4 \u043e\u0442\u0440\u0435\u0437\u043a\u0430. 2. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043e\u0442\u0440\u0435\u0437\u043a\u0430 \u0441\u043e\u0437\u0434\u0430\u0451\u043c \u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c Thread(target=partial_sum, args=(start, end, idx)) . 3. \u041a\u0430\u0436\u0434\u044b\u0439 \u043f\u043e\u0442\u043e\u043a \u0432 \u0441\u0432\u043e\u0451\u043c \u0446\u0438\u043a\u043b\u0435 \u0441\u0447\u0438\u0442\u0430\u0435\u0442 \u0441\u0443\u043c\u043c\u0443 \u0447\u0438\u0441\u0435\u043b \u0438 \u043a\u043b\u0430\u0434\u0451\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432 \u043e\u0431\u0449\u0438\u0439 \u0441\u043f\u0438\u0441\u043e\u043a partial_sums[idx] . 4. \u0412 \u0433\u043b\u0430\u0432\u043d\u043e\u043c \u043f\u043e\u0442\u043e\u043a\u0435 \u0436\u0434\u0451\u043c join() \u0432\u0441\u0435\u0445 \u043f\u043e\u0442\u043e\u043a\u043e\u0432, \u0441\u0443\u043c\u043c\u0438\u0440\u0443\u0435\u043c partial_sums \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0432\u0440\u0435\u043c\u044f. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u0430: - \u041f\u043e\u0442\u043e\u043a\u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u044e\u0442 \u043f\u0430\u043c\u044f\u0442\u044c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 \u2014 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0441\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0435\u043c \u0432 \u043e\u0431\u0449\u0438\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0431\u0435\u0437 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438. - GIL \u043d\u0435 \u0434\u0430\u0451\u0442 \u043f\u043e\u0442\u043e\u043a\u0430\u043c \u0440\u0435\u0430\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u043d\u044f\u0442\u044c\u0441\u044f \u043d\u0430 \u0440\u0430\u0437\u043d\u044b\u0445 \u044f\u0434\u0440\u0430\u0445 \u0434\u043b\u044f CPU-bound \u0437\u0430\u0434\u0430\u0447, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0432\u044b\u0438\u0433\u0440\u044b\u0448\u0430 \u043f\u043e \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u0438 \u043d\u0435\u0442. - \u041f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f I/O-bound \u0437\u0430\u0434\u0430\u0447, \u043d\u043e \u043d\u0435 \u0434\u043b\u044f \u0442\u044f\u0436\u0451\u043b\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439.","title":"1. Threading (\u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c)"},{"location":"lab2/#2-multiprocessing","text":"\u041a\u043e\u0434: \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043c\u043e\u0434\u0443\u043b\u044c multiprocessing.Pool . 1. \u0414\u0435\u043b\u0438\u043c \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u043d\u0430 4 \u043a\u043e\u0440\u0442\u0435\u0436\u0430 (start, end) . 2. \u0421\u043e\u0437\u0434\u0430\u0451\u043c Pool(processes=4) \u0438 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u043c pool.starmap(partial_sum_range, ranges) . 3. \u041a\u0430\u0436\u0434\u044b\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e \u0441\u0447\u0438\u0442\u0430\u0435\u0442 \u0441\u0432\u043e\u044e \u0447\u0430\u0441\u0442\u044c \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u0443\u044e \u0441\u0443\u043c\u043c\u0443. 4. \u0412 \u0433\u043b\u0430\u0432\u043d\u043e\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u0441\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0435\u043c \u0432\u0441\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0438 \u0438\u0437\u043c\u0435\u0440\u044f\u0435\u043c \u0432\u0440\u0435\u043c\u044f. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u0430: - \u041a\u0430\u0436\u0434\u044b\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u2014 \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440 Python \u0441 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c GIL, \u0447\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0435\u043c\u0443 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u0438\u0437\u043c\u0443 \u043d\u0430 \u043c\u043d\u043e\u0433\u043e\u0437\u0430\u0434\u0430\u0447\u043d\u044b\u0445 CPU. - \u041e\u0431\u043c\u0435\u043d \u0434\u0430\u043d\u043d\u044b\u0445 \u0447\u0435\u0440\u0435\u0437 \u0432\u043e\u0437\u0432\u0440\u0430\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0438\u0437 starmap , \u043d\u0435 \u0447\u0435\u0440\u0435\u0437 \u043e\u0431\u0449\u0443\u044e \u043f\u0430\u043c\u044f\u0442\u044c. - \u041b\u0443\u0447\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f CPU-bound \u0437\u0430\u0434\u0430\u0447.","title":"2. Multiprocessing (\u043c\u043d\u043e\u0433\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043d\u043e\u0441\u0442\u044c)"},{"location":"lab2/#3-asyncio","text":"\u041a\u043e\u0434: \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 asyncio \u0438 \u043a\u043e\u0440\u0443\u0442\u0438\u043d\u044b. 1. \u0414\u0435\u043b\u0438\u043c \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u043d\u0430 4 \u0447\u0430\u0441\u0442\u0438. 2. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0441\u043e\u0437\u0434\u0430\u0451\u043c \u043a\u043e\u0440\u0443\u0442\u0438\u043d\u0443 partial_sum_async(start, end) , \u0432\u043d\u0443\u0442\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043a\u0430\u0436\u0434\u044b\u0435 1 000 000 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0439 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f await asyncio.sleep(0) \u0447\u0442\u043e\u0431\u044b \u0443\u0441\u0442\u0443\u043f\u0438\u0442\u044c \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435. 3. \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0432\u0441\u0435 \u043a\u043e\u0440\u0443\u0442\u0438\u043d\u044b \u0447\u0435\u0440\u0435\u0437 asyncio.create_task(...) \u0438 \u0436\u0434\u0451\u043c \u0438\u0445 \u0432\u043c\u0435\u0441\u0442\u0435 \u0432 await asyncio.gather(...) . 4. \u0421\u0443\u043c\u043c\u0438\u0440\u0443\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0438 \u0437\u0430\u043c\u0435\u0440\u044f\u0435\u043c \u0432\u0440\u0435\u043c\u044f. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u0430: - \u0412\u0441\u0435 \u043a\u043e\u0440\u0443\u0442\u0438\u043d\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u0432 \u043e\u0434\u043d\u043e\u043c \u043f\u043e\u0442\u043e\u043a\u0435, \u0438 \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438 \u043a\u043e\u043e\u043f\u0435\u0440\u0430\u0442\u0438\u0432\u043d\u043e\u0435. - \u0414\u043b\u044f CPU-bound \u0437\u0430\u0434\u0430\u0447 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u043d\u0435 \u0434\u0430\u0451\u0442 \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f: \u0446\u0438\u043a\u043b \u0441\u043e\u0431\u044b\u0442\u0438\u0439 \u0431\u043b\u043e\u043a\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0442\u044f\u0436\u0451\u043b\u044b\u043c\u0438 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f\u043c\u0438. - \u042d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u0435\u043d \u0442\u043e\u043b\u043a\u043e \u0432 \u0441\u043e\u0447\u0435\u0442\u0430\u043d\u0438\u0438 \u0441 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c\u0438 I/O-\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u043c\u0438.","title":"3. AsyncIO (\u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c)"},{"location":"lab2/#1","text":"\u0414\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u043c \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432 \u043d\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 1_000_000_000, \u0447\u0442\u043e\u0431\u044b \u0443\u043b\u043e\u0436\u0438\u0442\u044c\u0441\u044f \u0432 \u0440\u0430\u0437\u0443\u043c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f. \u041f\u043e\u0434\u0445\u043e\u0434 \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u041c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e ( threading , 4 \u043f\u043e\u0442\u043e\u043a\u0430) 19.58 seconds (\u043d\u0435 \u0443\u0441\u043a\u043e\u0440\u044f\u0435\u0442\u0441\u044f) \u041c\u043d\u043e\u0433\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043d\u043e ( multiprocessing , 4 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430) 6.51 seconds (\u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u0432 4 \u0440\u0430\u0437\u0430 \u0431\u044b\u0441\u0442\u0440\u0435\u0435) AsyncIO (4 \u0437\u0430\u0434\u0430\u0447\u0438) 20.12 seconds (\u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e \u043e\u0434\u043d\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e)","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0438 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 (\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1)"},{"location":"lab2/#_2","text":"Multiprocessing \u043f\u043e\u043a\u0430\u0437\u0430\u043b \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u0435 , \u0442\u0430\u043a \u043a\u0430\u043a \u043a\u0430\u0436\u0434\u044b\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0440\u0430\u0431\u043e\u0442\u0430\u043b \u043d\u0430 \u0441\u0432\u043e\u0451\u043c \u044f\u0434\u0440\u0435 \u0431\u0435\u0437 GIL-\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0439. Threading \u0438 AsyncIO \u0434\u0430\u043b\u0438 \u0431\u043b\u0438\u0437\u043a\u0438\u0435 \u043f\u043e \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b: GIL \u0438 \u043e\u0434\u043d\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u044b\u0439 event loop \u043d\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u0440\u0430\u0441\u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u0438\u0442\u044c \u0447\u0438\u0441\u0442\u043e \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u0434. \u0414\u043b\u044f CPU-bound \u0437\u0430\u0434\u0430\u0447 \u0432\u044b\u0431\u043e\u0440 \u043e\u0447\u0435\u0432\u0438\u0434\u0435\u043d: multiprocessing . \u041f\u043e\u0442\u043e\u043a\u0438 \u0438 asyncio \u0437\u0434\u0435\u0441\u044c \u0438\u0437\u0431\u044b\u0442\u043e\u0447\u043d\u044b \u0438 \u0434\u0430\u0436\u0435 \u0447\u0443\u0442\u044c \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u0435\u0435 (\u0438\u0437-\u0437\u0430 \u043d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0445 \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432). \u0412\u044b\u0432\u043e\u0434 \u043f\u043e \u0437\u0430\u0434\u0430\u0447\u0435 1: \u0414\u043b\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0437\u0430\u0442\u0440\u0430\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 (\u0441\u0443\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0431\u043e\u043b\u044c\u0448\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0447\u0438\u0441\u0435\u043b) \u043c\u043e\u0434\u0435\u043b\u044c \u043c\u043d\u043e\u0433\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043d\u043e\u0441\u0442\u0438 \u0432\u044b\u0438\u0433\u0440\u044b\u0432\u0430\u0435\u0442, \u0442\u0430\u043a \u043a\u0430\u043a \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u044f\u0434\u0435\u0440 \u0438 \u043e\u0431\u0445\u043e\u0434\u0438\u0442 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 GIL. \u041c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0435 \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0432 CPython \u043d\u0435 \u043c\u043e\u0433\u0443\u0442 \u0443\u0441\u043a\u043e\u0440\u0438\u0442\u044c \u0442\u0430\u043a\u0438\u0435 \u0440\u0430\u0441\u0447\u0451\u0442\u044b \u0438 \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0438 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0442\u0443 \u0436\u0435 \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c, \u0447\u0442\u043e \u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u0434. \u0418\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f CPU-bound \u0437\u0430\u0434\u0430\u0447\u0438 \u043d\u0435\u043e\u043f\u0440\u0430\u0432\u0434\u0430\u043d\u043d\u043e \u2013 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0448\u0435, \u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043d\u0435 \u043b\u0443\u0447\u0448\u0435.","title":"\u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 \u043a \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c"},{"location":"lab2/#2-sqlite","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0442\u0440\u0438 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430 \u0441\u043a\u0440\u0438\u043f\u0442\u0430, \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u044e\u0449\u0435\u0433\u043e \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0438 \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u044e\u0449\u0435\u0433\u043e \u0441 \u043d\u0438\u0445 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 HTML ( <title> ), \u0441 \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0432 \u0431\u0430\u0437\u0443 SQLite. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u044d\u0442\u0438 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c: 1. threading (\u043f\u043e\u0442\u043e\u043a\u0438) 2. multiprocessing (\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b) 3. asyncio (\u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b, \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 aiohttp) \u0412 \u044d\u0442\u043e\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u043c\u044b \u0441\u0434\u0435\u043b\u0430\u043b\u0438 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430 \u0438\u0437 15 URL \u0441 \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435\u043c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0442\u0435\u0433\u0430 <title> \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u043b\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0432 \u043e\u0434\u043d\u0443 \u0438 \u0442\u0443 \u0436\u0435 \u0431\u0430\u0437\u0443 SQLite. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043b\u0438 \u0442\u0440\u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u0430 \u2014 threading , multiprocessing \u0438 asyncio \u2014 \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u043b\u0438 \u0432\u0440\u0435\u043c\u044f \u043f\u043e\u043b\u043d\u043e\u0433\u043e \u0446\u0438\u043a\u043b\u0430 \u00ab\u0437\u0430\u043f\u0440\u043e\u0441 \u2192 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u2192 \u0437\u0430\u043f\u0438\u0441\u044c\u00bb.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2: \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0432 SQLite"},{"location":"lab2/#1-threading_1","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u043e\u0434\u0430 \u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u0430: - \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e URL \u0441\u043e\u0437\u0434\u0430\u0451\u0442\u0441\u044f \u043f\u043e\u0442\u043e\u043a threading.Thread , \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441 requests.get() . - \u041a\u043e\u0433\u0434\u0430 \u043f\u043e\u0442\u043e\u043a \u0436\u0434\u0451\u0442 \u043e\u0442\u0432\u0435\u0442\u0430 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430, GIL \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043e\u0441\u0432\u043e\u0431\u043e\u0436\u0434\u0430\u0435\u0442\u0441\u044f, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044f \u0434\u0440\u0443\u0433\u0438\u043c \u043f\u043e\u0442\u043e\u043a\u0430\u043c \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c. - \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u044e\u0442\u0441\u044f \u0432 \u043e\u0431\u0449\u0438\u0439 \u0441\u043f\u0438\u0441\u043e\u043a results . - \u041f\u043e\u0441\u043b\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u043f\u043e\u0442\u043e\u043a\u043e\u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043f\u043e\u0442\u043e\u043a \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 sqlite3 \u0438 \u0432\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0432\u0441\u0435 \u0437\u0430\u043f\u0438\u0441\u0438 \u043e\u0434\u043d\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0435\u0439 executemany . \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438: - \u041f\u043e\u0442\u043e\u043a\u0438 \u043b\u0435\u0433\u043a\u043e \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c: \u043a\u043e\u0434 \u043f\u043e\u0447\u0442\u0438 \u043d\u0435 \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u043e\u0431\u044b\u0447\u043d\u043e\u0433\u043e \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e. - \u041f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447 \u0441 \u0432\u0432\u043e\u0434\u043e\u043c-\u0432\u044b\u0432\u043e\u0434\u043e\u043c (I/O-bound): \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e.","title":"1. Threading (\u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c)"},{"location":"lab2/#2-multiprocessing_1","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u043e\u0434\u0430 \u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u0430: - \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f multiprocessing.Pool \u0441 \u0447\u0438\u0441\u043b\u043e\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432, \u0440\u0430\u0432\u043d\u044b\u043c \u0447\u0438\u0441\u043b\u0443 URL (15). - \u041a\u0430\u0436\u0434\u044b\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u044e fetch_title(url) , \u0434\u0435\u043b\u0430\u0435\u0442 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441 \u0447\u0435\u0440\u0435\u0437 requests \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043a\u043e\u0440\u0442\u0435\u0436 (url, title) . - \u0412 \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u043f\u043e\u0441\u043b\u0435 pool.map \u0441\u043e\u0431\u0438\u0440\u0430\u044e\u0442\u0441\u044f \u0432\u0441\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0438 \u0432\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0432 SQLite. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438: - \u041a\u0430\u0436\u0434\u044b\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u2014 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440 Python, \u0441\u0432\u043e\u0439 GIL \u0438 \u0441\u0432\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u044b\u0439 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442. - \u041f\u0440\u043e\u0446\u0435\u0441\u0441\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e \u043d\u0430 \u0440\u0430\u0437\u043d\u044b\u0445 \u044f\u0434\u0440\u0430\u0445.","title":"2. Multiprocessing (\u043c\u043d\u043e\u0433\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043d\u043e\u0441\u0442\u044c)"},{"location":"lab2/#3-asyncio_1","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u043e\u0434\u0430 \u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u0430: - \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f aiohttp.ClientSession \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. - \u0412\u0441\u0435 15 \u043a\u043e\u0440\u0443\u0442\u0438\u043d fetch_title(session, url) \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u044e\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 asyncio.gather \u0432 \u043e\u0434\u043d\u043e\u043c \u043f\u043e\u0442\u043e\u043a\u0435. - \u0411\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044f await \u043d\u0430 \u0441\u0435\u0442\u0435\u0432\u043e\u043c \u0432\u0432\u043e\u0434\u0435-\u0432\u044b\u0432\u043e\u0434\u0435 \u043a\u043e\u0440\u0443\u0442\u0438\u043d\u044b \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0430\u044e\u0442\u0441\u044f \u043e\u0434\u043d\u0430 \u043d\u0430 \u0434\u0440\u0443\u0433\u0443\u044e \u0431\u0435\u0437 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u043e\u0442\u043e\u043a\u043e\u0432 \u0438\u043b\u0438 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432. - \u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e \u0447\u0435\u0440\u0435\u0437 aiosqlite , \u0447\u0442\u043e \u043d\u0435 \u0431\u043b\u043e\u043a\u0438\u0440\u0443\u0435\u0442 event loop. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438: - \u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u043d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0435 \u0440\u0430\u0441\u0445\u043e\u0434\u044b \u043d\u0430 \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438. - \u041e\u0442\u043b\u0438\u0447\u043d\u043e \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043d\u0430 \u0442\u044b\u0441\u044f\u0447\u0438 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439, \u043f\u043e\u0442\u0440\u0435\u0431\u043b\u044f\u0435\u0442 \u043c\u0430\u043b\u043e \u043f\u0430\u043c\u044f\u0442\u0438. - \u042d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u0435\u043d \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0434\u043b\u044f I/O-bound \u0437\u0430\u0434\u0430\u0447.","title":"3. AsyncIO (\u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c)"},{"location":"lab2/#_3","text":"\u041f\u043e\u0434\u0445\u043e\u0434 \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u0441 Threading 0.58 Multiprocessing 1.87 AsyncIO 0.65 \u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 \u043a \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c: - Threading \u043f\u043e\u043a\u0430\u0437\u0430\u043b \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0435\u0435 \u0432\u0440\u0435\u043c\u044f (0.58 \u0441): \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 I/O-bound \u0437\u0430\u0434\u0430\u0447 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043a\u043b\u0438\u0435\u043d\u0442 requests \u043e\u0447\u0435\u043d\u044c \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u0435\u043d. - AsyncIO \u043e\u0442\u0441\u0442\u0430\u043b \u043d\u0435\u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e (0.65 \u0441): \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043a\u043b\u0438\u0435\u043d\u0442 aiohttp \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 aiosqlite \u0434\u0430\u044e\u0442 \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0438\u0435 \u043d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0435 \u0440\u0430\u0441\u0445\u043e\u0434\u044b \u043d\u0430 \u0446\u0438\u043a\u043b \u0441\u043e\u0431\u044b\u0442\u0438\u0439, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0432\u0440\u0435\u043c\u044f \u0447\u0443\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435. - Multiprocessing \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0438 \u0441\u0430\u043c\u043e\u0435 \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u043e\u0435 (1.87 \u0441): \u0441\u043e\u0437\u0434\u0430\u0451\u0442\u0441\u044f 15 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 (\u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u043d\u0430 URL), \u0447\u0442\u043e \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043d\u0430 \u0441\u0442\u0430\u0440\u0442 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0443 \u0438\u0445 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441. \u0412\u044b\u0432\u043e\u0434 \u043f\u043e \u0437\u0430\u0434\u0430\u0447\u0435 2: \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441\u0438\u043b\u044c\u043d\u043e \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e. \u0418\u0437 \u0442\u0440\u0451\u0445 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: Threading \u043e\u043a\u0430\u0437\u0430\u043b\u0441\u044f \u0441\u0430\u043c\u044b\u043c \u0431\u044b\u0441\u0442\u0440\u044b\u043c \u043f\u0440\u0438 15 \u0441\u0441\u044b\u043b\u043a\u0430\u0445 \u2014 \u043f\u0440\u043e\u0441\u0442\u043e \u0441\u043e\u0437\u0434\u0430\u0451\u0448\u044c \u043f\u043e\u0442\u043e\u043a\u0438 \u0438 \u0441\u0440\u0430\u0437\u0443 \u0434\u0435\u043b\u0430\u0435\u0448\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b. AsyncIO \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0438\u0433\u0440\u0430\u043b, \u043d\u043e \u0442\u043e\u0436\u0435 \u0431\u044b\u0441\u0442\u0440\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0438 \u043b\u0435\u0433\u043a\u043e \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043d\u0430 \u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u0447\u0438\u0441\u043b\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. Multiprocessing \u0432 \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435 \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u0435\u0435 \u0438\u0437-\u0437\u0430 \u0437\u0430\u0442\u0440\u0430\u0442 \u043d\u0430 \u0437\u0430\u043f\u0443\u0441\u043a \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432. \u0418\u0442\u043e\u0433: \u0434\u043b\u044f \u0441\u0435\u0442\u0435\u0432\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043b\u0443\u0447\u0448\u0435 \u0431\u0440\u0430\u0442\u044c \u043f\u043e\u0442\u043e\u043a\u0438 \u0438\u043b\u0438 asyncio. \u041f\u0440\u043e\u0446\u0435\u0441\u0441\u044b \u0437\u0434\u0435\u0441\u044c \u043d\u0438 \u043a \u0447\u0435\u043c\u0443.","title":"\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f"},{"location":"lab2/#_4","text":"Multiprocessing : \u0431\u044b\u0441\u0442\u0440\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0442\u044f\u0436\u0451\u043b\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u0432\u0441\u0435\u0445 \u044f\u0434\u0440\u0430\u0445, \u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0451\u0442 \u043c\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 \u0438 \u0435\u0441\u0442 \u0431\u043e\u043b\u044c\u0448\u0435 \u043f\u0430\u043c\u044f\u0442\u0438. Threading : \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0441\u0435\u0442\u0435\u0432\u044b\u0435 \u0438 \u0444\u0430\u0439\u043b\u043e\u0432\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043d\u043e \u0432 \u0442\u044f\u0436\u0451\u043b\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f\u0445 \u043d\u0435 \u0443\u0441\u043a\u043e\u0440\u044f\u0435\u0442 \u0438\u0437-\u0437\u0430 GIL. AsyncIO : \u043e\u0442\u043b\u0438\u0447\u043d\u043e \u0441\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u0447\u0438\u0441\u043b\u043e\u043c \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 I/O-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0431\u0435\u0437 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u043e\u0442\u043e\u043a\u043e\u0432, \u043d\u043e \u043d\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439.","title":"\u041e\u0431\u0449\u0438\u0435 \u0432\u044b\u0432\u043e\u0434\u044b"},{"location":"lab3/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3: \u0423\u043f\u0430\u043a\u043e\u0432\u043a\u0430 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0432 Docker, \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u041e\u0447\u0435\u0440\u0435\u0434\u0438 \u0426\u0435\u043b\u044c \u041d\u0430\u0443\u0447\u0438\u0442\u044c\u0441\u044f \u0443\u043f\u0430\u043a\u043e\u0432\u044b\u0432\u0430\u0442\u044c FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0432 Docker, \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0430\u0440\u0441\u0435\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c \u043f\u0430\u0440\u0441\u0435\u0440 \u0447\u0435\u0440\u0435\u0437 HTTP \u0438 \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0437\u0430\u0434\u0430\u0447 (Celery + Redis). \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 project_root/ \u2502 \u251c\u2500\u2500 api_service/ # FastAPI API-\u0441\u0435\u0440\u0432\u0438\u0441 (\u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435) \u2502 \u251c\u2500\u2500 main.py \u2502 \u251c\u2500\u2500 routes.py \u2502 \u251c\u2500\u2500 models.py \u2502 \u251c\u2500\u2500 repository.py \u2502 \u251c\u2500\u2500 tasks.py \u2502 \u251c\u2500\u2500 celery_app.py \u2502 \u251c\u2500\u2500 database.py \u2502 \u251c\u2500\u2500 requests.py \u2502 \u251c\u2500\u2500 responses.py \u2502 \u251c\u2500\u2500 status_enum.py \u2502 \u2514\u2500\u2500 requirements.txt \u2502 \u251c\u2500\u2500 parser_service/ # FastAPI \u0441\u0435\u0440\u0432\u0438\u0441\u2013\u043f\u0430\u0440\u0441\u0435\u0440 \u2502 \u251c\u2500\u2500 main.py \u2502 \u251c\u2500\u2500 routes.py \u2502 \u251c\u2500\u2500 parser.py \u2502 \u251c\u2500\u2500 redis_listener.py \u2502 \u251c\u2500\u2500 requests.py \u2502 \u251c\u2500\u2500 responses.py \u2502 \u2514\u2500\u2500 requirements.txt \u2502 \u251c\u2500\u2500 docker-compose.yml \u251c\u2500\u2500 Dockerfile.api # Dockerfile \u0434\u043b\u044f api_service \u251c\u2500\u2500 Dockerfile.parser # Dockerfile \u0434\u043b\u044f parser_service \u2514\u2500\u2500 README.md # \u0418\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f \u043f\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0443 (\u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438) \u0423\u043f\u0430\u043a\u043e\u0432\u043a\u0430 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0438 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0432 Docker 1.1. Dockerfile \u0434\u043b\u044f API-\u0441\u0435\u0440\u0432\u0438\u0441\u0430 api_service \u2014 \u044d\u0442\u043e FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435: \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 ( parse_sync , parse_async , status , result ). \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430\u0445 \u0432 PostgreSQL (\u0442\u0430\u0431\u043b\u0438\u0446\u0430 parse_requests ). \u0414\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0441\u0442\u0430\u0432\u0438\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c Celery (\u0447\u0435\u0440\u0435\u0437 Redis). \u041d\u0438\u0436\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0451\u043d \u043f\u0440\u0438\u043c\u0435\u0440 Dockerfile.api , \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u044b\u0432\u0430\u0435\u0442 \u0432\u0435\u0441\u044c api_service \u0432 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440: # Dockerfile.api # 1. \u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u043e\u0431\u0440\u0430\u0437 \u0441 Python 3.10 (\u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u043d\u043e \u043c\u043e\u0436\u043d\u043e \u0432\u0437\u044f\u0442\u044c slim-\u0432\u0435\u0440\u0441\u0438\u044e) FROM python:3.10-slim # 2. \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u0440\u0430\u0431\u043e\u0447\u0443\u044e \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044e WORKDIR /app # 3. \u041a\u043e\u043f\u0438\u0440\u0443\u0435\u043c requirements \u0438 \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 COPY api_service/requirements.txt . RUN pip install --no-cache-dir -r requirements.txt # 4. \u041a\u043e\u043f\u0438\u0440\u0443\u0435\u043c \u0438\u0441\u0445\u043e\u0434\u043d\u0438\u043a\u0438 API-\u0441\u0435\u0440\u0432\u0438\u0441\u0430 COPY api_service/ . # 5. \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e (\u043f\u0440\u0438 \u0436\u0435\u043b\u0430\u043d\u0438\u0438) ENV DATABASE_URL=postgresql+asyncpg://user:pass@db:5432/app_db ENV REDIS_URL=redis://redis:6379/0 ENV TASK_QUEUE=parser:tasks ENV RESULT_PREFIX=parser:results: # 6. \u041e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u043f\u043e\u0440\u0442, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u043f\u0443\u0449\u0435\u043d FastAPI EXPOSE 8000 # 7. \u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 uvicorn (\u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f, \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b FastAPI) CMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"] 1.2. Dockerfile \u0434\u043b\u044f \u0441\u0435\u0440\u0432\u0438\u0441\u0430-\u043f\u0430\u0440\u0441\u0435\u0440\u0430 parser_service \u2014 \u044d\u0442\u043e FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435: \u0421\u043b\u0443\u0448\u0430\u0435\u0442 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u0435 /fetch \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 (\u0441\u043a\u0430\u0447\u0438\u0432\u0430\u0435\u0442 HTML \u043f\u043e URL, \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 <title> \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e BeautifulSoup). \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e, \u0432 \u0440\u0435\u0436\u0438\u043c\u0435 \u0441\u043b\u0443\u0448\u0430\u0442\u0435\u043b\u044f (listener) \u0441\u043b\u0443\u0448\u0430\u0435\u0442 Redis-\u043a\u044c\u044e parser:tasks , \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438 \u043a\u043b\u0430\u0434\u0451\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432 Redis \u0441 \u043a\u043b\u044e\u0447\u043e\u043c parser:results:{request_id} . # Dockerfile.parser # 1. \u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u043e\u0431\u0440\u0430\u0437 Python FROM python:3.10-slim # 2. \u0420\u0430\u0431\u043e\u0447\u0430\u044f \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f WORKDIR /app # 3. \u041a\u043e\u043f\u0438\u0440\u0443\u0435\u043c \u0438 \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 COPY parser_service/requirements.txt . RUN pip install --no-cache-dir -r requirements.txt # 4. \u041a\u043e\u043f\u0438\u0440\u0443\u0435\u043c \u0438\u0441\u0445\u043e\u0434\u043d\u0438\u043a\u0438 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 COPY parser_service/ . # 5. \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f ENV REDIS_URL=redis://redis:6379/0 ENV TASK_QUEUE=parser:tasks ENV RESULT_PREFIX=parser:results: # 6. \u041e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u043f\u043e\u0440\u0442 \u0434\u043b\u044f FastAPI (\u0441\u0435\u0440\u0432\u0438\u0441-\u043f\u0430\u0440\u0441\u0435\u0440 \u043c\u043e\u0436\u0435\u0442 \u043e\u0442\u0432\u0435\u0447\u0430\u0442\u044c \u043d\u0430 HTTP, \u0445\u043e\u0442\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043f\u043e\u0442\u043e\u043a \u2013 listener) EXPOSE 8001 # 7. \u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0437\u0430\u043f\u0443\u0441\u043a\u0430: uvicorn + \u0437\u0430\u043f\u0443\u0441\u043a background listener \u0432 \u0444\u043e\u043d\u043e\u0432\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0447\u0435\u0440\u0435\u0437 tmux/pm2/supervisor # \u0417\u0434\u0435\u0441\u044c \u043f\u0440\u0438\u0432\u0435\u0434\u0451\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 listener \u0438 FastAPI \u0432 \u043e\u0434\u043d\u043e\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u0447\u0435\u0440\u0435\u0437 shell-\u0441\u043a\u0440\u0438\u043f\u0442. COPY start_parser.sh . RUN chmod +x start_parser.sh CMD [\"./start_parser.sh\"] \u0412\u043d\u0443\u0442\u0440\u0438 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u044e\u0442\u0441\u044f \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0434\u0432\u0435 \u0437\u0430\u0434\u0430\u0447\u0438: FastAPI (\u0434\u043b\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 HTTP \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432) \u0438 listener (\u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0437\u0430\u0434\u0430\u0447 \u0438\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u0438). python -u redis_listener.py \u2014 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0439 \u0446\u0438\u043a\u043b start_listener , \u0441\u043c. parser_service/redis_listener.py : ```python import asyncio import json import os import redis.asyncio as aioredis from parser import fetch_html_and_title TASK_QUEUE = os.getenv(\"TASK_QUEUE\", \"parser:tasks\") RESULT_PREFIX = os.getenv(\"RESULT_PREFIX\", \"parser:results:\") async def start_listener(redis: aioredis.Redis) -> None: print(\"[listener] started, waiting for tasks\u2026\") while True: task = await redis.blpop(TASK_QUEUE, timeout=5) if task is None: continue _, raw = task payload = json.loads(raw) req_id = payload[\"id\"] url = payload[\"url\"] print(f\"[listener] got task id={req_id} url={url}\") try: title, html = await fetch_html_and_title(url) result = {\"status\": \"success\", \"title\": title, \"html\": html} except Exception as err: print(f\"[listener] task failed: {err}\") result = {\"status\": \"failure\", \"error\": str(err)} await redis.set(f\"{RESULT_PREFIX}{req_id}\", json.dumps(result), ex=3600) print(f\"[listener] stored result for id={req_id}\") async def main(): redis = aioredis.from_url(os.getenv(\"REDIS_URL\"), decode_responses=True) try: await start_listener(redis) finally: await redis.close() if name == \" main \": asyncio.run(main()) ``` 1.3. Docker Compose: docker-compose.yml docker-compose.yml \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0441\u0435\u0440\u0432\u0438\u0441\u044b: db \u2014 PostgreSQL (\u043e\u0431\u0440\u0430\u0437 postgres:15-alpine ). redis \u2014 Redis (\u043e\u0431\u0440\u0430\u0437 redis:6-alpine ). api \u2014 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0441 FastAPI ( Dockerfile.api ). parser \u2014 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0441 FastAPI + listener ( Dockerfile.parser ). worker \u2014 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0441 Celery worker (\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043a\u043e\u0434 \u0438\u0437 api_service/celery_app.py \u0438 api_service/tasks.py ). version: \"3.9\" services: db: image: postgres:15-alpine container_name: postgres_db restart: unless-stopped environment: POSTGRES_USER: user POSTGRES_PASSWORD: pass POSTGRES_DB: app_db volumes: - db_data:/var/lib/postgresql/data ports: - \"5432:5432\" redis: image: redis:6-alpine container_name: redis_cache restart: unless-stopped ports: - \"6379:6379\" parser: build: context: . dockerfile: Dockerfile.parser container_name: parser_service depends_on: - redis environment: REDIS_URL: \"redis://redis:6379/0\" TASK_QUEUE: \"parser:tasks\" RESULT_PREFIX: \"parser:results:\" ports: - \"8001:8001\" api: build: context: . dockerfile: Dockerfile.api container_name: api_service depends_on: - db - redis - parser environment: DATABASE_URL: \"postgresql+asyncpg://user:pass@db:5432/app_db\" REDIS_URL: \"redis://redis:6379/0\" TASK_QUEUE: \"parser:tasks\" RESULT_PREFIX: \"parser:results:\" ports: - \"8000:8000\" worker: image: python:3.10-slim container_name: celery_worker working_dir: /app command: celery -A celery_app.celery_app worker --loglevel=info -Q api volumes: - ./api_service:/app depends_on: - api - redis - db environment: DATABASE_URL: \"postgresql+asyncpg://user:pass@db:5432/app_db\" REDIS_URL: \"redis://redis:6379/0\" TASK_QUEUE: \"parser:tasks\" RESULT_PREFIX: \"parser:results:\" volumes: db_data: \u041f\u043e\u044f\u0441\u043d\u0435\u043d\u0438\u044f \u043a docker-compose.yml : db \u0438 redis \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u044e\u0442\u0441\u044f \u043f\u0435\u0440\u0432\u044b\u043c\u0438, \u0447\u0442\u043e\u0431\u044b \u0438\u0445 \u043c\u043e\u0433\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0435\u0440\u0432\u0438\u0441\u044b. parser \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 redis (\u043e\u0447\u0435\u0440\u0435\u0434\u0438 \u0437\u0430\u0434\u0430\u0447). api \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 db , redis \u0438 parser . worker (Celery) \u043c\u043e\u043d\u0442\u0438\u0440\u0443\u0435\u0442 \u043a\u043e\u0434 \u0438\u0437 api_service \u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u0441 \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439: yaml command: celery -A celery_app.celery_app worker --loglevel=info -Q api \u0433\u0434\u0435 -A celery_app.celery_app \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 Celery \u201capp\u201d (\u0444\u0430\u0439\u043b api_service/celery_app.py ), \u0430 -Q api \u2014 \u043e\u0447\u0435\u0440\u0435\u0434\u044c api , \u0437\u0430\u0434\u0430\u043d\u043d\u0430\u044f \u0432 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 Celery (\u0441\u043c. celery_app.py ). \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 HTTP-\u0432\u044b\u0437\u043e\u0432 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 2.1. \u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b FastAPI ( api_service/routes.py ) 2.1.1. \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0447\u0435\u0440\u0435\u0437 HTTP \u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 GET /parse_sync \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u043f\u0430\u0440\u0441\u0435\u0440 (\u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 parser_service ) \u0438 \u0441\u0440\u0430\u0437\u0443 \u0436\u0434\u0451\u0442 \u043e\u0442\u0432\u0435\u0442\u0430: @router.get(\"/parse_sync\") async def parse_sync( query: Annotated[ParseSyncQuery, Query()], ) -> SyncResult: async with httpx.AsyncClient(timeout=10, follow_redirects=True) as client: try: resp = await client.get(PARSER_HTTP, params={\"url\": query.url}) resp.raise_for_status() except httpx.HTTPError as exc: raise HTTPException(status_code=502, detail=str(exc)) from exc data = resp.json() return SyncResult( url=query.url, title=data[\"title\"], html=data[\"html\"] ) PARSER_HTTP = \"http://parser:8001/fetch\" \u2014 URL \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0432\u043d\u0443\u0442\u0440\u0438 \u0441\u0435\u0442\u0438 Docker Compose. ParseSyncQuery (\u0432 api_service/requests.py ) \u0438\u043c\u0435\u0435\u0442 \u043f\u043e\u043b\u0435 url: HttpUrl . \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u043c\u043e\u0434\u0435\u043b\u044c SyncResult (\u0432 api_service/responses.py ): python class SyncResult(BaseModel): title: str html: str url: HttpUrl 2.1.2. \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 (\u0447\u0435\u0440\u0435\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u044c Celery) \u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 POST /parse_async \u0441\u043e\u0437\u0434\u0430\u0451\u0442 \u0437\u0430\u043f\u0438\u0441\u044c \u0432 \u0431\u0430\u0437\u0435 (\u0442\u0430\u0431\u043b\u0438\u0446\u0430 parse_requests ), \u0441\u0442\u0430\u0432\u0438\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 request_id + \u0441\u0442\u0430\u0442\u0443\u0441: @router.post(\"/parse_async\") async def parse_async( payload: ParseAsyncCreate, session: Annotated[AsyncSession, Depends(get_session)], ) -> ParseAsyncResponse: req = await Repo.create(session, str(payload.url)) parse_url_task.delay(req.id, str(payload.url)) return ParseAsyncResponse(request_id=req.id, status=req.status) ParseAsyncCreate (\u0432 api_service/requests.py ): python class ParseAsyncCreate(BaseModel): url: HttpUrl = Field(..., example=\"https://example.com\") * Repo.create() (\u0432 api_service/repository.py ) \u0441\u043e\u0437\u0434\u0430\u0451\u0442 \u043d\u043e\u0432\u0443\u044e \u0437\u0430\u043f\u0438\u0441\u044c ParseRequest : python class ParseRepository: @staticmethod async def create(session: AsyncSession, url: str) -> ParseRequest: req = ParseRequest(url=url, status=StatusEnum.pending) session.add(req) await session.commit() await session.refresh(req) return req * parse_url_task.delay(req.id, str(payload.url)) \u2014 \u0441\u0442\u0430\u0432\u0438\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c Celery (\u043e\u0447\u0435\u0440\u0435\u0434\u044c api ). \u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430: @router.get(\"/status/{request_id}\") async def status( request_id: int, session: Annotated[AsyncSession, Depends(get_session)], ) -> StatusResponse: obj = await Repo.by_id(session, request_id) if not obj: raise HTTPException(status_code=404, detail=\"Not found\") return StatusResponse(request_id=obj.id, status=obj.status) @router.get(\"/result/{request_id}\") async def result( request_id: int, session: Annotated[AsyncSession, Depends(get_session)], ) -> ResultResponse: obj = await Repo.by_id(session, request_id) if not obj: raise HTTPException(status_code=404, detail=\"Not found\") return ResultResponse( request_id=obj.id, status=obj.status, title=obj.title, html=obj.html_content, ) StatusResponse \u0438 ResultResponse \u043e\u043f\u0438\u0441\u0430\u043d\u044b \u0432 api_service/responses.py : ```python class StatusResponse(BaseModel): request_id: int status: StatusEnum class ResultResponse(BaseModel): request_id: int status: StatusEnum title: Optional[str] = None html: Optional[str] = None ``` \u0418\u0442\u043e\u0433: GET /parse_sync?url=... \u2014 \u0431\u043b\u043e\u043a\u0438\u0440\u0443\u044e\u0449\u0438\u0439 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0432\u044b\u0437\u043e\u0432 \u043f\u0430\u0440\u0441\u0435\u0440\u0430. POST /parse_async {\"url\": \"...\"} \u2014 \u0437\u0430\u043f\u0438\u0441\u044c \u0432 \u0411\u0414 + \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 Celery. GET /status/{id} \u0438 GET /result/{id} \u2014 \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 \u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430. \u0412\u044b\u0437\u043e\u0432 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0447\u0435\u0440\u0435\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u044c (Celery + Redis) 3.1. \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 Celery api_service/celery_app.py from celery import Celery import os REDIS_URL = os.getenv(\"REDIS_URL\", \"redis://redis:6379/0\") celery_app = Celery( \"api_service\", broker=REDIS_URL, backend=REDIS_URL, include=[\"api_service.tasks\"], ) # \u041e\u0447\u0435\u0440\u0435\u0434\u044c \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e celery_app.conf.task_default_queue = \"api\" celery_app.conf.timezone = \"UTC\" broker=REDIS_URL \u2014 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f Redis \u043a\u0430\u043a \u0431\u0440\u043e\u043a\u0435\u0440 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 (\u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0437\u0430\u0434\u0430\u0447). backend=REDIS_URL \u2014 Redis \u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 (\u043d\u0435\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e, \u043d\u043e \u0443\u0434\u043e\u0431\u043d\u043e). include=[\"api_service.tasks\"] \u2014 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u043c\u043e\u0434\u0443\u043b\u044c \u0441 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438. 3.2. \u0422\u0430\u0441\u043a \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0432 Celery api_service/tasks.py import asyncio import json import os from time import time, sleep import redis from celery import shared_task from sqlalchemy import update from api_service.celery_app import celery_app from api_service.database import AsyncSessionLocal from api_service.models import ParseRequest, StatusEnum REDIS_URL = os.getenv(\"REDIS_URL\", \"redis://redis:6379/0\") TASK_QUEUE = os.getenv(\"TASK_QUEUE\", \"parser:tasks\") RESULT_PREFIX = os.getenv(\"RESULT_PREFIX\", \"parser:results:\") @shared_task(name=\"api.parse_url\", queue=\"api\") def parse_url_task(request_id: int, url: str) -> None: \"\"\" 1) \u041a\u043b\u0430\u0434\u0451\u043c \u0437\u0430\u0434\u0430\u0447\u0443 \u0432 Redis \u0441\u043f\u0438\u0441\u043e\u043a TASK_QUEUE. 2) \u0411\u043b\u043e\u043a\u0438\u0440\u0443\u044e\u0449\u0435 \u0436\u0434\u0451\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 (\u0434\u043e 30 \u0441\u0435\u043a\u0443\u043d\u0434). 3) \u0417\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0443 parse_requests. \"\"\" # \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c\u0441\u044f \u043a Redis r = redis.Redis.from_url(REDIS_URL, decode_responses=True) # 1) \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c payload = json.dumps({\"id\": request_id, \"url\": url}) r.lpush(TASK_QUEUE, payload) # 2) \u041e\u0436\u0438\u0434\u0430\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432 Redis \u043f\u043e\u0434 \u043a\u043b\u044e\u0447\u043e\u043c RESULT_PREFIX{request_id} res_key = f\"{RESULT_PREFIX}{request_id}\" deadline = time() + 30 result_data = None while time() < deadline: data = r.get(res_key) if data: result_data = json.loads(data) r.delete(res_key) break sleep(1) # \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0437\u0430\u043f\u0438\u0441\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0432 \u0411\u0414 async def _write(status: StatusEnum, title: str | None = None, html: str | None = None): async with AsyncSessionLocal() as session: stmt = ( update(ParseRequest) .where(ParseRequest.id == request_id) .values(status=status, title=title, html_content=html) ) await session.execute(stmt) await session.commit() if not result_data: # \u0415\u0441\u043b\u0438 Timeout asyncio.run(_write(StatusEnum.failure, title=None, html=\"Timeout waiting result\")) return # \u0415\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 if result_data.get(\"status\") == \"success\": asyncio.run(_write(StatusEnum.success, title=result_data.get(\"title\"), html=result_data.get(\"html\"))) else: asyncio.run(_write(StatusEnum.failure, html=result_data.get(\"error\"))) \u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u043c\u043e\u043c\u0435\u043d\u0442\u044b \u043a\u043e\u0434\u0430: shared_task(name=\"api.parse_url\", queue=\"api\") \u2014 \u043e\u0431\u044a\u044f\u0432\u043b\u044f\u0435\u043c Celery-\u0437\u0430\u0434\u0430\u0447\u0443 \u043f\u043e\u0434 \u0438\u043c\u0435\u043d\u0435\u043c api.parse_url , \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u0441\u044f \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c api . \u0427\u0435\u0440\u0435\u0437 redis.Redis.from_url(REDIS_URL) \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c\u0441\u044f \u043a Redis. r.lpush(TASK_QUEUE, payload) \u2014 \u043a\u043b\u0430\u0434\u0451\u043c JSON { \"id\": request_id, \"url\": url } \u0432 \u0441\u043f\u0438\u0441\u043e\u043a parser:tasks . \u0411\u043b\u043e\u043a\u0438\u0440\u0443\u044e\u0449\u0438\u043c \u0446\u0438\u043a\u043b\u043e\u043c \u0436\u0434\u0451\u043c, \u043f\u043e\u043a\u0430 \u043f\u0430\u0440\u0441\u0435\u0440 \u043d\u0435 \u043f\u043e\u043b\u043e\u0436\u0438\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u043e\u0434 \u043a\u043b\u044e\u0447 parser:results:{id} (\u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c 30 \u0441\u0435\u043a\u0443\u043d\u0434). \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0443\u044e \u0437\u0430\u043f\u0438\u0441\u044c \u0432 PostgreSQL \u0447\u0435\u0440\u0435\u0437 SQLAlchemy Async (\u0444\u0443\u043d\u043a\u0446\u0438\u044f _write ). 3.3. \u0421\u0435\u0440\u0432\u0438\u0441-\u043f\u0430\u0440\u0441\u0435\u0440: \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447 \u0438\u0437 Redis \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 parser_service/redis_listener.py import asyncio import json import os import redis.asyncio as aioredis from parser_service.parser import fetch_html_and_title TASK_QUEUE = os.getenv(\"TASK_QUEUE\", \"parser:tasks\") RESULT_PREFIX = os.getenv(\"RESULT_PREFIX\", \"parser:results:\") async def start_listener(redis: aioredis.Redis) -> None: print(\"[listener] started, waiting for tasks\u2026\") while True: try: task = await redis.blpop(TASK_QUEUE, timeout=5) if task is None: continue _, raw = task payload = json.loads(raw) req_id = payload[\"id\"] url = payload[\"url\"] print(f\"[listener] got task id={req_id} url={url}\") try: title, html = await fetch_html_and_title(url) result = {\"status\": \"success\", \"title\": title, \"html\": html} except Exception as err: print(f\"[listener] task failed: {err}\") result = {\"status\": \"failure\", \"error\": str(err)} await redis.set(f\"{RESULT_PREFIX}{req_id}\", json.dumps(result), ex=3600) print(f\"[listener] stored result for id={req_id}\") except Exception as exc: print(f\"[listener] error: {exc}\") await asyncio.sleep(1) async def main(): redis_url = os.getenv(\"REDIS_URL\", \"redis://redis:6379/0\") redis = aioredis.from_url(redis_url, decode_responses=True) try: await start_listener(redis) finally: await redis.close() if __name__ == \"__main__\": asyncio.run(main()) parser_service/parser.py import httpx from bs4 import BeautifulSoup from typing import Tuple async def fetch_html_and_title(url: str, timeout: float = 10.0) -> Tuple[str, str]: async with httpx.AsyncClient(follow_redirects=True, timeout=timeout) as client: resp = await client.get(url) resp.raise_for_status() html_text = resp.text soup = BeautifulSoup(html_text, \"lxml\") title_tag = soup.find(\"title\") title = title_tag.text.strip() if title_tag else \"\" return title, html_text parser_service/routes.py (\u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0434\u043b\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430) from fastapi import APIRouter, HTTPException, Query from parser_service.parser import fetch_html_and_title from parser_service.requests import FetchQuery from parser_service.responses import FetchResponse router = APIRouter() @router.get( \"/fetch\", response_model=FetchResponse, summary=\"\u0421\u043a\u0430\u0447\u0430\u0442\u044c \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0438 \u0432\u0435\u0440\u043d\u0443\u0442\u044c HTML\" ) async def fetch(query: Annotated[FetchQuery, Query(...)]): try: title, html = await fetch_html_and_title(str(query.url)) except Exception as exc: raise HTTPException(status_code=502, detail=str(exc)) from exc return FetchResponse(url=query.url, title=title, html=html) FetchQuery (\u0432 parser_service/requests.py ): python class FetchQuery(BaseModel): url: HttpUrl = Field(..., example=\"https://example.com\") * FetchResponse (\u0432 parser_service/responses.py ): python class FetchResponse(BaseModel): url: HttpUrl title: str html: str * \u041f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430 parser_service \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0441\u0442\u0430\u0440\u0442\u0443\u0435\u0442 \u044d\u0442\u043e\u0442 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 ( /fetch ) \u0438 start_listener , \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u0442 \u043e\u0447\u0435\u0440\u0435\u0434\u044c. 3.4. \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 Docker Compose \u0434\u043b\u044f Celery \u0438 Redis \u0412 docker-compose.yml (\u043f\u0440\u0438\u0432\u0435\u0434\u0451\u043d \u0432\u044b\u0448\u0435) \u0443\u0436\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u0441\u0435\u0440\u0432\u0438\u0441\u044b redis \u0438 worker . redis : \u043e\u0431\u0440\u0430\u0437 redis:6-alpine , \u043f\u043e\u0440\u0442 6379 worker : \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 Celery worker \u0441 \u043e\u0447\u0435\u0440\u0435\u0434\u044c\u044e api , \u043c\u043e\u043d\u0442\u0438\u0440\u0443\u0435\u0442 ./api_service \u0432\u043d\u0443\u0442\u0440\u044c \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430 \u041f\u0440\u0438\u043c\u0435\u0440 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 Celery \u0432\u043d\u0443\u0442\u0440\u0438 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430 worker: worker: image: python:3.10-slim container_name: celery_worker working_dir: /app command: celery -A celery_app.celery_app worker --loglevel=info -Q api volumes: - ./api_service:/app depends_on: - api - redis - db environment: DATABASE_URL: \"postgresql+asyncpg://user:pass@db:5432/app_db\" REDIS_URL: \"redis://redis:6379/0\" TASK_QUEUE: \"parser:tasks\" RESULT_PREFIX: \"parser:results:\" celery -A celery_app.celery_app worker \u2014 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 Celery \u0438\u0441\u043a\u0430\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442 celery_app \u0432 api_service/celery_app.py . -Q api \u2014 \u0441\u043b\u0443\u0448\u0430\u0442\u044c \u043e\u0447\u0435\u0440\u0435\u0434\u044c api (\u043a\u0430\u043a \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d\u043e \u0432 celery_app.conf.task_default_queue ). \u0427\u0435\u0440\u0435\u0437 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Redis \u0438 PostgreSQL. \u041f\u043e\u0441\u043b\u0435 \u043f\u043e\u0434\u043d\u044f\u0442\u0438\u044f \u0432\u0441\u0435\u0445 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u043e\u0432 ( docker-compose up --build ): parser_service \u0441\u043b\u0443\u0448\u0430\u0435\u0442 HTTP /fetch \u0438 Redis-\u043e\u0447\u0435\u0440\u0435\u0434\u044c parser:tasks . api_service \u0441\u043b\u0443\u0448\u0430\u0435\u0442 HTTP /parse_sync , /parse_async , /status/{} , /result/{} . worker (Celery) \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u0437 Redis-\u043e\u0447\u0435\u0440\u0435\u0434\u0438 api , \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 parse_url_task , \u0441\u0442\u0430\u0432\u0438\u0442 \u043d\u043e\u0432\u044b\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 Redis \u0434\u043b\u044f parser_service . 3.5. \u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0434\u043b\u044f \u0441\u0442\u0430\u0432\u043d\u043e\u0432\u043a\u0438 \u0437\u0430\u0434\u0430\u0447\u0438 \u0447\u0435\u0440\u0435\u0437 Celery \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e \u0432\u043d\u0443\u0442\u0440\u0438 api_service/routes.py \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u044b: @router.post(\"/parse_async\") async def parse_async( payload: ParseAsyncCreate, session: Annotated[AsyncSession, Depends(get_session)], ) -> ParseAsyncResponse: req = await Repo.create(session, str(payload.url)) parse_url_task.delay(req.id, str(payload.url)) return ParseAsyncResponse(request_id=req.id, status=req.status) \u0421\u043e\u0437\u0434\u0430\u0451\u0442\u0441\u044f \u0437\u0430\u043f\u0438\u0441\u044c \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 parse_requests (\u043c\u043e\u0434\u0435\u043b\u044c api_service/models.py ): python class ParseRequest(Base): __tablename__ = \"parse_requests\" id: Mapped[int] = mapped_column(primary_key=True) url: Mapped[str] status: Mapped[StatusEnum] = mapped_column(Enum(StatusEnum), default=StatusEnum.pending) title: Mapped[Optional[str]] html_content: Mapped[Optional[str]] created_at: Mapped[datetime] = mapped_column(default=datetime.utcnow, server_default=func.now()) updated_at: Mapped[datetime] = mapped_column(default=datetime.utcnow, onupdate=datetime.utcnow, server_default=func.now()) * \u0421\u0442\u0430\u0442\u0443\u0441 \u043a\u0430\u0436\u0434\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0432 ParseRequest.status (enum pending , processing , success , failure ). * parse_url_task.delay(req.id, str(payload.url)) \u2014 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c api (Celery Worker). \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 @router.get(\"/status/{request_id}\") async def status(...): obj = await Repo.by_id(session, request_id) if not obj: raise HTTPException(status_code=404, detail=\"Not found\") return StatusResponse(request_id=obj.id, status=obj.status) @router.get(\"/result/{request_id}\") async def result(...): obj = await Repo.by_id(session, request_id) if not obj: raise HTTPException(status_code=404, detail=\"Not found\") return ResultResponse( request_id=obj.id, status=obj.status, title=obj.title, html=obj.html_content, ) 3.6. \u041f\u0435\u0440\u0438\u043e\u0434\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 (\u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e) Celery \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 beat \u0434\u043b\u044f \u043f\u0435\u0440\u0438\u043e\u0434\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0437\u0430\u0434\u0430\u0447 (cron-\u043f\u043e\u0434\u043e\u0431\u043d\u044b\u0445). \u0412 celery_app.py \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043a\u043e\u043d\u0444\u0438\u0433 beat_schedule : from celery import Celery import os REDIS_URL = os.getenv(\"REDIS_URL\", \"redis://redis:6379/0\") celery_app = Celery( \"api_service\", broker=REDIS_URL, backend=REDIS_URL, include=[\"api_service.tasks\"], ) celery_app.conf.task_default_queue = \"api\" celery_app.conf.timezone = \"UTC\" # \u041f\u0440\u0438\u043c\u0435\u0440 \u043f\u0435\u0440\u0438\u043e\u0434\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438: \u043e\u0447\u0438\u0441\u0442\u043a\u0430 \u0443\u0441\u0442\u0430\u0440\u0435\u0432\u0448\u0438\u0445 \u0437\u0430\u043f\u0438\u0441\u0435\u0439 celery_app.conf.beat_schedule = { \"cleanup_parse_requests_every_midnight\": { \"task\": \"api.cleanup_parse_requests\", \"schedule\": crontab(hour=0, minute=0), }, } \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043f\u043e\u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u0442\u0430\u0441\u043a \u0432 api_service/tasks.py : python @shared_task(name=\"api.cleanup_parse_requests\") def cleanup_parse_requests(): # \u0417\u0434\u0435\u0441\u044c \u043b\u043e\u0433\u0438\u043a\u0430 \u043e\u0447\u0438\u0441\u0442\u043a\u0438: \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0437\u0430\u043f\u0438\u0441\u0438 \u0441\u0442\u0430\u0440\u0448\u0435 N \u0434\u043d\u0435\u0439 pass * \u0412 docker-compose.yml \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u0435\u0440\u0432\u0438\u0441 beat : yaml beat: image: python:3.10-slim container_name: celery_beat working_dir: /app command: celery -A celery_app.celery_app beat --loglevel=info volumes: - ./api_service:/app depends_on: - redis - db environment: DATABASE_URL: \"postgresql+asyncpg://user:pass@db:5432/app_db\" REDIS_URL: \"redis://redis:6379/0\" \u0412\u0430\u0436\u043d\u043e: \u041f\u0435\u0440\u0438\u043e\u0434\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u043d\u0435 \u0431\u044b\u043b\u0438 \u044f\u0432\u043d\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u0432 \u043a\u043e\u0434\u0435, \u043f\u0440\u0438\u0432\u0435\u0434\u0451\u043d\u043d\u043e\u043c \u0432 collected_py_files.json , \u043d\u043e \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u043a\u0430\u043a \u0438\u0445 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c. \u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0412 \u0445\u043e\u0434\u0435 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b\u0438 \u0434\u043e\u0441\u0442\u0438\u0433\u043d\u0443\u0442\u044b \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b: \u041a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0438\u0437\u0430\u0446\u0438\u044f : \u0421\u043e\u0437\u0434\u0430\u043d\u044b Dockerfile.api \u0438 Dockerfile.parser \u0434\u043b\u044f \u0443\u043f\u0430\u043a\u043e\u0432\u044b\u0432\u0430\u043d\u0438\u044f FastAPI-\u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 (API \u0438 \u043f\u0430\u0440\u0441\u0435\u0440\u0430) \u0432\u043c\u0435\u0441\u0442\u0435 \u0441\u043e \u0432\u0441\u0435\u043c\u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u043c\u0438. \u041d\u0430\u043f\u0438\u0441\u0430\u043d docker-compose.yml , \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u044e\u0449\u0438\u0439 \u0441\u0435\u0440\u0432\u0438\u0441\u044b: PostgreSQL, Redis, API, \u043f\u0430\u0440\u0441\u0435\u0440, Celery worker. \u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f HTTP-\u0432\u044b\u0437\u043e\u0432\u0430 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 : \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441 \u043a \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u0443 /parse_sync (\u043f\u0430\u0440\u0441\u0435\u0440 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0435\u043c\u0435\u0434\u043b\u0435\u043d\u043d\u043e). \u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 /parse_async : \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u0411\u0414, \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 Celery-\u043e\u0447\u0435\u0440\u0435\u0434\u044c, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u0435 request_id . \u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b /status/{id} \u0438 /result/{id} \u0434\u043b\u044f \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430 \u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430. \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u043d\u0430 Celery + Redis : \u041d\u0430\u0441\u0442\u0440\u043e\u0435\u043d Celery ( api_service/celery_app.py ) \u0434\u043b\u044f \u0444\u043e\u043d\u043e\u0432\u044b\u0445 \u0437\u0430\u0434\u0430\u0447. \u0421\u043e\u0437\u0434\u0430\u043d \u0442\u0430\u0441\u043a parse_url_task (\u0432 api_service/tasks.py ), \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 \u043f\u0430\u0440\u0441\u0435\u0440\u0443 \u0447\u0435\u0440\u0435\u0437 Redis, \u0436\u0434\u0451\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0435\u0433\u043e \u0432 PostgreSQL. \u041f\u0430\u0440\u0441\u0435\u0440 ( parser_service/redis_listener.py ) \u0441\u043b\u0443\u0448\u0430\u0435\u0442 Redis-\u043e\u0447\u0435\u0440\u0435\u0434\u044c parser:tasks , \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0438 \u043a\u043b\u0430\u0434\u0451\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432 Redis \u0441 \u043a\u043b\u044e\u0447\u043e\u043c parser:results:{id} . Celery worker ( worker ) \u0437\u0430\u0431\u0438\u0440\u0430\u0435\u0442 \u0442\u0430\u0441\u043a\u0438 \u0438\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u0438 api \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0438\u0445. \u0412 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435: FastAPI API \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u044b, \u0445\u0440\u0430\u043d\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u0434\u0430\u0447\u0435 \u0432 PostgreSQL. Celery worker \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0443\u0435\u0442 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 API \u2194 Parser \u0447\u0435\u0440\u0435\u0437 Redis. Parser service \u043f\u043e \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044e \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b, \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 <title> \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c.","title":"Lab 3"},{"location":"lab3/#3-fastapi-docker","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3: \u0423\u043f\u0430\u043a\u043e\u0432\u043a\u0430 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0432 Docker, \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u041e\u0447\u0435\u0440\u0435\u0434\u0438"},{"location":"lab3/#_1","text":"\u041d\u0430\u0443\u0447\u0438\u0442\u044c\u0441\u044f \u0443\u043f\u0430\u043a\u043e\u0432\u044b\u0432\u0430\u0442\u044c FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0432 Docker, \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0430\u0440\u0441\u0435\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c \u043f\u0430\u0440\u0441\u0435\u0440 \u0447\u0435\u0440\u0435\u0437 HTTP \u0438 \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0437\u0430\u0434\u0430\u0447 (Celery + Redis).","title":"\u0426\u0435\u043b\u044c"},{"location":"lab3/#_2","text":"project_root/ \u2502 \u251c\u2500\u2500 api_service/ # FastAPI API-\u0441\u0435\u0440\u0432\u0438\u0441 (\u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435) \u2502 \u251c\u2500\u2500 main.py \u2502 \u251c\u2500\u2500 routes.py \u2502 \u251c\u2500\u2500 models.py \u2502 \u251c\u2500\u2500 repository.py \u2502 \u251c\u2500\u2500 tasks.py \u2502 \u251c\u2500\u2500 celery_app.py \u2502 \u251c\u2500\u2500 database.py \u2502 \u251c\u2500\u2500 requests.py \u2502 \u251c\u2500\u2500 responses.py \u2502 \u251c\u2500\u2500 status_enum.py \u2502 \u2514\u2500\u2500 requirements.txt \u2502 \u251c\u2500\u2500 parser_service/ # FastAPI \u0441\u0435\u0440\u0432\u0438\u0441\u2013\u043f\u0430\u0440\u0441\u0435\u0440 \u2502 \u251c\u2500\u2500 main.py \u2502 \u251c\u2500\u2500 routes.py \u2502 \u251c\u2500\u2500 parser.py \u2502 \u251c\u2500\u2500 redis_listener.py \u2502 \u251c\u2500\u2500 requests.py \u2502 \u251c\u2500\u2500 responses.py \u2502 \u2514\u2500\u2500 requirements.txt \u2502 \u251c\u2500\u2500 docker-compose.yml \u251c\u2500\u2500 Dockerfile.api # Dockerfile \u0434\u043b\u044f api_service \u251c\u2500\u2500 Dockerfile.parser # Dockerfile \u0434\u043b\u044f parser_service \u2514\u2500\u2500 README.md # \u0418\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f \u043f\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0443 (\u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438)","title":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430"},{"location":"lab3/#fastapi-docker","text":"","title":"\u0423\u043f\u0430\u043a\u043e\u0432\u043a\u0430 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0438 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0432 Docker"},{"location":"lab3/#11-dockerfile-api-","text":"api_service \u2014 \u044d\u0442\u043e FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435: \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 ( parse_sync , parse_async , status , result ). \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430\u0445 \u0432 PostgreSQL (\u0442\u0430\u0431\u043b\u0438\u0446\u0430 parse_requests ). \u0414\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0441\u0442\u0430\u0432\u0438\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c Celery (\u0447\u0435\u0440\u0435\u0437 Redis). \u041d\u0438\u0436\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0451\u043d \u043f\u0440\u0438\u043c\u0435\u0440 Dockerfile.api , \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u044b\u0432\u0430\u0435\u0442 \u0432\u0435\u0441\u044c api_service \u0432 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440: # Dockerfile.api # 1. \u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u043e\u0431\u0440\u0430\u0437 \u0441 Python 3.10 (\u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u043d\u043e \u043c\u043e\u0436\u043d\u043e \u0432\u0437\u044f\u0442\u044c slim-\u0432\u0435\u0440\u0441\u0438\u044e) FROM python:3.10-slim # 2. \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u0440\u0430\u0431\u043e\u0447\u0443\u044e \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044e WORKDIR /app # 3. \u041a\u043e\u043f\u0438\u0440\u0443\u0435\u043c requirements \u0438 \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 COPY api_service/requirements.txt . RUN pip install --no-cache-dir -r requirements.txt # 4. \u041a\u043e\u043f\u0438\u0440\u0443\u0435\u043c \u0438\u0441\u0445\u043e\u0434\u043d\u0438\u043a\u0438 API-\u0441\u0435\u0440\u0432\u0438\u0441\u0430 COPY api_service/ . # 5. \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e (\u043f\u0440\u0438 \u0436\u0435\u043b\u0430\u043d\u0438\u0438) ENV DATABASE_URL=postgresql+asyncpg://user:pass@db:5432/app_db ENV REDIS_URL=redis://redis:6379/0 ENV TASK_QUEUE=parser:tasks ENV RESULT_PREFIX=parser:results: # 6. \u041e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u043f\u043e\u0440\u0442, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u043f\u0443\u0449\u0435\u043d FastAPI EXPOSE 8000 # 7. \u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 uvicorn (\u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f, \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b FastAPI) CMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]","title":"1.1. Dockerfile \u0434\u043b\u044f API-\u0441\u0435\u0440\u0432\u0438\u0441\u0430"},{"location":"lab3/#12-dockerfile-","text":"parser_service \u2014 \u044d\u0442\u043e FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435: \u0421\u043b\u0443\u0448\u0430\u0435\u0442 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u0435 /fetch \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 (\u0441\u043a\u0430\u0447\u0438\u0432\u0430\u0435\u0442 HTML \u043f\u043e URL, \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 <title> \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e BeautifulSoup). \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e, \u0432 \u0440\u0435\u0436\u0438\u043c\u0435 \u0441\u043b\u0443\u0448\u0430\u0442\u0435\u043b\u044f (listener) \u0441\u043b\u0443\u0448\u0430\u0435\u0442 Redis-\u043a\u044c\u044e parser:tasks , \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438 \u043a\u043b\u0430\u0434\u0451\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432 Redis \u0441 \u043a\u043b\u044e\u0447\u043e\u043c parser:results:{request_id} . # Dockerfile.parser # 1. \u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u043e\u0431\u0440\u0430\u0437 Python FROM python:3.10-slim # 2. \u0420\u0430\u0431\u043e\u0447\u0430\u044f \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f WORKDIR /app # 3. \u041a\u043e\u043f\u0438\u0440\u0443\u0435\u043c \u0438 \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 COPY parser_service/requirements.txt . RUN pip install --no-cache-dir -r requirements.txt # 4. \u041a\u043e\u043f\u0438\u0440\u0443\u0435\u043c \u0438\u0441\u0445\u043e\u0434\u043d\u0438\u043a\u0438 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 COPY parser_service/ . # 5. \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f ENV REDIS_URL=redis://redis:6379/0 ENV TASK_QUEUE=parser:tasks ENV RESULT_PREFIX=parser:results: # 6. \u041e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u043f\u043e\u0440\u0442 \u0434\u043b\u044f FastAPI (\u0441\u0435\u0440\u0432\u0438\u0441-\u043f\u0430\u0440\u0441\u0435\u0440 \u043c\u043e\u0436\u0435\u0442 \u043e\u0442\u0432\u0435\u0447\u0430\u0442\u044c \u043d\u0430 HTTP, \u0445\u043e\u0442\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043f\u043e\u0442\u043e\u043a \u2013 listener) EXPOSE 8001 # 7. \u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0437\u0430\u043f\u0443\u0441\u043a\u0430: uvicorn + \u0437\u0430\u043f\u0443\u0441\u043a background listener \u0432 \u0444\u043e\u043d\u043e\u0432\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0447\u0435\u0440\u0435\u0437 tmux/pm2/supervisor # \u0417\u0434\u0435\u0441\u044c \u043f\u0440\u0438\u0432\u0435\u0434\u0451\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 listener \u0438 FastAPI \u0432 \u043e\u0434\u043d\u043e\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u0447\u0435\u0440\u0435\u0437 shell-\u0441\u043a\u0440\u0438\u043f\u0442. COPY start_parser.sh . RUN chmod +x start_parser.sh CMD [\"./start_parser.sh\"] \u0412\u043d\u0443\u0442\u0440\u0438 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u044e\u0442\u0441\u044f \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0434\u0432\u0435 \u0437\u0430\u0434\u0430\u0447\u0438: FastAPI (\u0434\u043b\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 HTTP \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432) \u0438 listener (\u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0437\u0430\u0434\u0430\u0447 \u0438\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u0438). python -u redis_listener.py \u2014 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0439 \u0446\u0438\u043a\u043b start_listener , \u0441\u043c. parser_service/redis_listener.py : ```python import asyncio import json import os import redis.asyncio as aioredis from parser import fetch_html_and_title TASK_QUEUE = os.getenv(\"TASK_QUEUE\", \"parser:tasks\") RESULT_PREFIX = os.getenv(\"RESULT_PREFIX\", \"parser:results:\") async def start_listener(redis: aioredis.Redis) -> None: print(\"[listener] started, waiting for tasks\u2026\") while True: task = await redis.blpop(TASK_QUEUE, timeout=5) if task is None: continue _, raw = task payload = json.loads(raw) req_id = payload[\"id\"] url = payload[\"url\"] print(f\"[listener] got task id={req_id} url={url}\") try: title, html = await fetch_html_and_title(url) result = {\"status\": \"success\", \"title\": title, \"html\": html} except Exception as err: print(f\"[listener] task failed: {err}\") result = {\"status\": \"failure\", \"error\": str(err)} await redis.set(f\"{RESULT_PREFIX}{req_id}\", json.dumps(result), ex=3600) print(f\"[listener] stored result for id={req_id}\") async def main(): redis = aioredis.from_url(os.getenv(\"REDIS_URL\"), decode_responses=True) try: await start_listener(redis) finally: await redis.close() if name == \" main \": asyncio.run(main()) ```","title":"1.2. Dockerfile \u0434\u043b\u044f \u0441\u0435\u0440\u0432\u0438\u0441\u0430-\u043f\u0430\u0440\u0441\u0435\u0440\u0430"},{"location":"lab3/#13-docker-compose-docker-composeyml","text":"docker-compose.yml \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0441\u0435\u0440\u0432\u0438\u0441\u044b: db \u2014 PostgreSQL (\u043e\u0431\u0440\u0430\u0437 postgres:15-alpine ). redis \u2014 Redis (\u043e\u0431\u0440\u0430\u0437 redis:6-alpine ). api \u2014 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0441 FastAPI ( Dockerfile.api ). parser \u2014 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0441 FastAPI + listener ( Dockerfile.parser ). worker \u2014 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0441 Celery worker (\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043a\u043e\u0434 \u0438\u0437 api_service/celery_app.py \u0438 api_service/tasks.py ). version: \"3.9\" services: db: image: postgres:15-alpine container_name: postgres_db restart: unless-stopped environment: POSTGRES_USER: user POSTGRES_PASSWORD: pass POSTGRES_DB: app_db volumes: - db_data:/var/lib/postgresql/data ports: - \"5432:5432\" redis: image: redis:6-alpine container_name: redis_cache restart: unless-stopped ports: - \"6379:6379\" parser: build: context: . dockerfile: Dockerfile.parser container_name: parser_service depends_on: - redis environment: REDIS_URL: \"redis://redis:6379/0\" TASK_QUEUE: \"parser:tasks\" RESULT_PREFIX: \"parser:results:\" ports: - \"8001:8001\" api: build: context: . dockerfile: Dockerfile.api container_name: api_service depends_on: - db - redis - parser environment: DATABASE_URL: \"postgresql+asyncpg://user:pass@db:5432/app_db\" REDIS_URL: \"redis://redis:6379/0\" TASK_QUEUE: \"parser:tasks\" RESULT_PREFIX: \"parser:results:\" ports: - \"8000:8000\" worker: image: python:3.10-slim container_name: celery_worker working_dir: /app command: celery -A celery_app.celery_app worker --loglevel=info -Q api volumes: - ./api_service:/app depends_on: - api - redis - db environment: DATABASE_URL: \"postgresql+asyncpg://user:pass@db:5432/app_db\" REDIS_URL: \"redis://redis:6379/0\" TASK_QUEUE: \"parser:tasks\" RESULT_PREFIX: \"parser:results:\" volumes: db_data: \u041f\u043e\u044f\u0441\u043d\u0435\u043d\u0438\u044f \u043a docker-compose.yml : db \u0438 redis \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u044e\u0442\u0441\u044f \u043f\u0435\u0440\u0432\u044b\u043c\u0438, \u0447\u0442\u043e\u0431\u044b \u0438\u0445 \u043c\u043e\u0433\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0435\u0440\u0432\u0438\u0441\u044b. parser \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 redis (\u043e\u0447\u0435\u0440\u0435\u0434\u0438 \u0437\u0430\u0434\u0430\u0447). api \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 db , redis \u0438 parser . worker (Celery) \u043c\u043e\u043d\u0442\u0438\u0440\u0443\u0435\u0442 \u043a\u043e\u0434 \u0438\u0437 api_service \u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u0441 \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439: yaml command: celery -A celery_app.celery_app worker --loglevel=info -Q api \u0433\u0434\u0435 -A celery_app.celery_app \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 Celery \u201capp\u201d (\u0444\u0430\u0439\u043b api_service/celery_app.py ), \u0430 -Q api \u2014 \u043e\u0447\u0435\u0440\u0435\u0434\u044c api , \u0437\u0430\u0434\u0430\u043d\u043d\u0430\u044f \u0432 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 Celery (\u0441\u043c. celery_app.py ).","title":"1.3. Docker Compose: docker-compose.yml"},{"location":"lab3/#http-","text":"","title":"\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 HTTP-\u0432\u044b\u0437\u043e\u0432 \u043f\u0430\u0440\u0441\u0435\u0440\u0430"},{"location":"lab3/#21-fastapi-api_serviceroutespy","text":"","title":"2.1. \u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b FastAPI (api_service/routes.py)"},{"location":"lab3/#211-http","text":"\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 GET /parse_sync \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u043f\u0430\u0440\u0441\u0435\u0440 (\u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 parser_service ) \u0438 \u0441\u0440\u0430\u0437\u0443 \u0436\u0434\u0451\u0442 \u043e\u0442\u0432\u0435\u0442\u0430: @router.get(\"/parse_sync\") async def parse_sync( query: Annotated[ParseSyncQuery, Query()], ) -> SyncResult: async with httpx.AsyncClient(timeout=10, follow_redirects=True) as client: try: resp = await client.get(PARSER_HTTP, params={\"url\": query.url}) resp.raise_for_status() except httpx.HTTPError as exc: raise HTTPException(status_code=502, detail=str(exc)) from exc data = resp.json() return SyncResult( url=query.url, title=data[\"title\"], html=data[\"html\"] ) PARSER_HTTP = \"http://parser:8001/fetch\" \u2014 URL \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0432\u043d\u0443\u0442\u0440\u0438 \u0441\u0435\u0442\u0438 Docker Compose. ParseSyncQuery (\u0432 api_service/requests.py ) \u0438\u043c\u0435\u0435\u0442 \u043f\u043e\u043b\u0435 url: HttpUrl . \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u043c\u043e\u0434\u0435\u043b\u044c SyncResult (\u0432 api_service/responses.py ): python class SyncResult(BaseModel): title: str html: str url: HttpUrl","title":"2.1.1. \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0447\u0435\u0440\u0435\u0437 HTTP"},{"location":"lab3/#212-celery","text":"\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 POST /parse_async \u0441\u043e\u0437\u0434\u0430\u0451\u0442 \u0437\u0430\u043f\u0438\u0441\u044c \u0432 \u0431\u0430\u0437\u0435 (\u0442\u0430\u0431\u043b\u0438\u0446\u0430 parse_requests ), \u0441\u0442\u0430\u0432\u0438\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 request_id + \u0441\u0442\u0430\u0442\u0443\u0441: @router.post(\"/parse_async\") async def parse_async( payload: ParseAsyncCreate, session: Annotated[AsyncSession, Depends(get_session)], ) -> ParseAsyncResponse: req = await Repo.create(session, str(payload.url)) parse_url_task.delay(req.id, str(payload.url)) return ParseAsyncResponse(request_id=req.id, status=req.status) ParseAsyncCreate (\u0432 api_service/requests.py ): python class ParseAsyncCreate(BaseModel): url: HttpUrl = Field(..., example=\"https://example.com\") * Repo.create() (\u0432 api_service/repository.py ) \u0441\u043e\u0437\u0434\u0430\u0451\u0442 \u043d\u043e\u0432\u0443\u044e \u0437\u0430\u043f\u0438\u0441\u044c ParseRequest : python class ParseRepository: @staticmethod async def create(session: AsyncSession, url: str) -> ParseRequest: req = ParseRequest(url=url, status=StatusEnum.pending) session.add(req) await session.commit() await session.refresh(req) return req * parse_url_task.delay(req.id, str(payload.url)) \u2014 \u0441\u0442\u0430\u0432\u0438\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c Celery (\u043e\u0447\u0435\u0440\u0435\u0434\u044c api ). \u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430: @router.get(\"/status/{request_id}\") async def status( request_id: int, session: Annotated[AsyncSession, Depends(get_session)], ) -> StatusResponse: obj = await Repo.by_id(session, request_id) if not obj: raise HTTPException(status_code=404, detail=\"Not found\") return StatusResponse(request_id=obj.id, status=obj.status) @router.get(\"/result/{request_id}\") async def result( request_id: int, session: Annotated[AsyncSession, Depends(get_session)], ) -> ResultResponse: obj = await Repo.by_id(session, request_id) if not obj: raise HTTPException(status_code=404, detail=\"Not found\") return ResultResponse( request_id=obj.id, status=obj.status, title=obj.title, html=obj.html_content, ) StatusResponse \u0438 ResultResponse \u043e\u043f\u0438\u0441\u0430\u043d\u044b \u0432 api_service/responses.py : ```python class StatusResponse(BaseModel): request_id: int status: StatusEnum class ResultResponse(BaseModel): request_id: int status: StatusEnum title: Optional[str] = None html: Optional[str] = None ``` \u0418\u0442\u043e\u0433: GET /parse_sync?url=... \u2014 \u0431\u043b\u043e\u043a\u0438\u0440\u0443\u044e\u0449\u0438\u0439 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0432\u044b\u0437\u043e\u0432 \u043f\u0430\u0440\u0441\u0435\u0440\u0430. POST /parse_async {\"url\": \"...\"} \u2014 \u0437\u0430\u043f\u0438\u0441\u044c \u0432 \u0411\u0414 + \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 Celery. GET /status/{id} \u0438 GET /result/{id} \u2014 \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 \u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430.","title":"2.1.2. \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 (\u0447\u0435\u0440\u0435\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u044c Celery)"},{"location":"lab3/#celery-redis","text":"","title":"\u0412\u044b\u0437\u043e\u0432 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0447\u0435\u0440\u0435\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u044c (Celery + Redis)"},{"location":"lab3/#31-celery","text":"","title":"3.1. \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 Celery"},{"location":"lab3/#api_servicecelery_apppy","text":"from celery import Celery import os REDIS_URL = os.getenv(\"REDIS_URL\", \"redis://redis:6379/0\") celery_app = Celery( \"api_service\", broker=REDIS_URL, backend=REDIS_URL, include=[\"api_service.tasks\"], ) # \u041e\u0447\u0435\u0440\u0435\u0434\u044c \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e celery_app.conf.task_default_queue = \"api\" celery_app.conf.timezone = \"UTC\" broker=REDIS_URL \u2014 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f Redis \u043a\u0430\u043a \u0431\u0440\u043e\u043a\u0435\u0440 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 (\u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0437\u0430\u0434\u0430\u0447). backend=REDIS_URL \u2014 Redis \u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 (\u043d\u0435\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e, \u043d\u043e \u0443\u0434\u043e\u0431\u043d\u043e). include=[\"api_service.tasks\"] \u2014 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u043c\u043e\u0434\u0443\u043b\u044c \u0441 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438.","title":"api_service/celery_app.py"},{"location":"lab3/#32-celery","text":"","title":"3.2. \u0422\u0430\u0441\u043a \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0432 Celery"},{"location":"lab3/#api_servicetaskspy","text":"import asyncio import json import os from time import time, sleep import redis from celery import shared_task from sqlalchemy import update from api_service.celery_app import celery_app from api_service.database import AsyncSessionLocal from api_service.models import ParseRequest, StatusEnum REDIS_URL = os.getenv(\"REDIS_URL\", \"redis://redis:6379/0\") TASK_QUEUE = os.getenv(\"TASK_QUEUE\", \"parser:tasks\") RESULT_PREFIX = os.getenv(\"RESULT_PREFIX\", \"parser:results:\") @shared_task(name=\"api.parse_url\", queue=\"api\") def parse_url_task(request_id: int, url: str) -> None: \"\"\" 1) \u041a\u043b\u0430\u0434\u0451\u043c \u0437\u0430\u0434\u0430\u0447\u0443 \u0432 Redis \u0441\u043f\u0438\u0441\u043e\u043a TASK_QUEUE. 2) \u0411\u043b\u043e\u043a\u0438\u0440\u0443\u044e\u0449\u0435 \u0436\u0434\u0451\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 (\u0434\u043e 30 \u0441\u0435\u043a\u0443\u043d\u0434). 3) \u0417\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0443 parse_requests. \"\"\" # \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c\u0441\u044f \u043a Redis r = redis.Redis.from_url(REDIS_URL, decode_responses=True) # 1) \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c payload = json.dumps({\"id\": request_id, \"url\": url}) r.lpush(TASK_QUEUE, payload) # 2) \u041e\u0436\u0438\u0434\u0430\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432 Redis \u043f\u043e\u0434 \u043a\u043b\u044e\u0447\u043e\u043c RESULT_PREFIX{request_id} res_key = f\"{RESULT_PREFIX}{request_id}\" deadline = time() + 30 result_data = None while time() < deadline: data = r.get(res_key) if data: result_data = json.loads(data) r.delete(res_key) break sleep(1) # \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0437\u0430\u043f\u0438\u0441\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0432 \u0411\u0414 async def _write(status: StatusEnum, title: str | None = None, html: str | None = None): async with AsyncSessionLocal() as session: stmt = ( update(ParseRequest) .where(ParseRequest.id == request_id) .values(status=status, title=title, html_content=html) ) await session.execute(stmt) await session.commit() if not result_data: # \u0415\u0441\u043b\u0438 Timeout asyncio.run(_write(StatusEnum.failure, title=None, html=\"Timeout waiting result\")) return # \u0415\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 if result_data.get(\"status\") == \"success\": asyncio.run(_write(StatusEnum.success, title=result_data.get(\"title\"), html=result_data.get(\"html\"))) else: asyncio.run(_write(StatusEnum.failure, html=result_data.get(\"error\"))) \u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u043c\u043e\u043c\u0435\u043d\u0442\u044b \u043a\u043e\u0434\u0430: shared_task(name=\"api.parse_url\", queue=\"api\") \u2014 \u043e\u0431\u044a\u044f\u0432\u043b\u044f\u0435\u043c Celery-\u0437\u0430\u0434\u0430\u0447\u0443 \u043f\u043e\u0434 \u0438\u043c\u0435\u043d\u0435\u043c api.parse_url , \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u0441\u044f \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c api . \u0427\u0435\u0440\u0435\u0437 redis.Redis.from_url(REDIS_URL) \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c\u0441\u044f \u043a Redis. r.lpush(TASK_QUEUE, payload) \u2014 \u043a\u043b\u0430\u0434\u0451\u043c JSON { \"id\": request_id, \"url\": url } \u0432 \u0441\u043f\u0438\u0441\u043e\u043a parser:tasks . \u0411\u043b\u043e\u043a\u0438\u0440\u0443\u044e\u0449\u0438\u043c \u0446\u0438\u043a\u043b\u043e\u043c \u0436\u0434\u0451\u043c, \u043f\u043e\u043a\u0430 \u043f\u0430\u0440\u0441\u0435\u0440 \u043d\u0435 \u043f\u043e\u043b\u043e\u0436\u0438\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u043e\u0434 \u043a\u043b\u044e\u0447 parser:results:{id} (\u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c 30 \u0441\u0435\u043a\u0443\u043d\u0434). \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0443\u044e \u0437\u0430\u043f\u0438\u0441\u044c \u0432 PostgreSQL \u0447\u0435\u0440\u0435\u0437 SQLAlchemy Async (\u0444\u0443\u043d\u043a\u0446\u0438\u044f _write ).","title":"api_service/tasks.py"},{"location":"lab3/#33-redis","text":"","title":"3.3. \u0421\u0435\u0440\u0432\u0438\u0441-\u043f\u0430\u0440\u0441\u0435\u0440: \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447 \u0438\u0437 Redis \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430"},{"location":"lab3/#parser_serviceredis_listenerpy","text":"import asyncio import json import os import redis.asyncio as aioredis from parser_service.parser import fetch_html_and_title TASK_QUEUE = os.getenv(\"TASK_QUEUE\", \"parser:tasks\") RESULT_PREFIX = os.getenv(\"RESULT_PREFIX\", \"parser:results:\") async def start_listener(redis: aioredis.Redis) -> None: print(\"[listener] started, waiting for tasks\u2026\") while True: try: task = await redis.blpop(TASK_QUEUE, timeout=5) if task is None: continue _, raw = task payload = json.loads(raw) req_id = payload[\"id\"] url = payload[\"url\"] print(f\"[listener] got task id={req_id} url={url}\") try: title, html = await fetch_html_and_title(url) result = {\"status\": \"success\", \"title\": title, \"html\": html} except Exception as err: print(f\"[listener] task failed: {err}\") result = {\"status\": \"failure\", \"error\": str(err)} await redis.set(f\"{RESULT_PREFIX}{req_id}\", json.dumps(result), ex=3600) print(f\"[listener] stored result for id={req_id}\") except Exception as exc: print(f\"[listener] error: {exc}\") await asyncio.sleep(1) async def main(): redis_url = os.getenv(\"REDIS_URL\", \"redis://redis:6379/0\") redis = aioredis.from_url(redis_url, decode_responses=True) try: await start_listener(redis) finally: await redis.close() if __name__ == \"__main__\": asyncio.run(main())","title":"parser_service/redis_listener.py"},{"location":"lab3/#parser_serviceparserpy","text":"import httpx from bs4 import BeautifulSoup from typing import Tuple async def fetch_html_and_title(url: str, timeout: float = 10.0) -> Tuple[str, str]: async with httpx.AsyncClient(follow_redirects=True, timeout=timeout) as client: resp = await client.get(url) resp.raise_for_status() html_text = resp.text soup = BeautifulSoup(html_text, \"lxml\") title_tag = soup.find(\"title\") title = title_tag.text.strip() if title_tag else \"\" return title, html_text","title":"parser_service/parser.py"},{"location":"lab3/#parser_serviceroutespy","text":"from fastapi import APIRouter, HTTPException, Query from parser_service.parser import fetch_html_and_title from parser_service.requests import FetchQuery from parser_service.responses import FetchResponse router = APIRouter() @router.get( \"/fetch\", response_model=FetchResponse, summary=\"\u0421\u043a\u0430\u0447\u0430\u0442\u044c \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0438 \u0432\u0435\u0440\u043d\u0443\u0442\u044c HTML\" ) async def fetch(query: Annotated[FetchQuery, Query(...)]): try: title, html = await fetch_html_and_title(str(query.url)) except Exception as exc: raise HTTPException(status_code=502, detail=str(exc)) from exc return FetchResponse(url=query.url, title=title, html=html) FetchQuery (\u0432 parser_service/requests.py ): python class FetchQuery(BaseModel): url: HttpUrl = Field(..., example=\"https://example.com\") * FetchResponse (\u0432 parser_service/responses.py ): python class FetchResponse(BaseModel): url: HttpUrl title: str html: str * \u041f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430 parser_service \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0441\u0442\u0430\u0440\u0442\u0443\u0435\u0442 \u044d\u0442\u043e\u0442 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 ( /fetch ) \u0438 start_listener , \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u0442 \u043e\u0447\u0435\u0440\u0435\u0434\u044c.","title":"parser_service/routes.py (\u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0434\u043b\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430)"},{"location":"lab3/#34-docker-compose-celery-redis","text":"\u0412 docker-compose.yml (\u043f\u0440\u0438\u0432\u0435\u0434\u0451\u043d \u0432\u044b\u0448\u0435) \u0443\u0436\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u0441\u0435\u0440\u0432\u0438\u0441\u044b redis \u0438 worker . redis : \u043e\u0431\u0440\u0430\u0437 redis:6-alpine , \u043f\u043e\u0440\u0442 6379 worker : \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 Celery worker \u0441 \u043e\u0447\u0435\u0440\u0435\u0434\u044c\u044e api , \u043c\u043e\u043d\u0442\u0438\u0440\u0443\u0435\u0442 ./api_service \u0432\u043d\u0443\u0442\u0440\u044c \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430 \u041f\u0440\u0438\u043c\u0435\u0440 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 Celery \u0432\u043d\u0443\u0442\u0440\u0438 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430 worker: worker: image: python:3.10-slim container_name: celery_worker working_dir: /app command: celery -A celery_app.celery_app worker --loglevel=info -Q api volumes: - ./api_service:/app depends_on: - api - redis - db environment: DATABASE_URL: \"postgresql+asyncpg://user:pass@db:5432/app_db\" REDIS_URL: \"redis://redis:6379/0\" TASK_QUEUE: \"parser:tasks\" RESULT_PREFIX: \"parser:results:\" celery -A celery_app.celery_app worker \u2014 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 Celery \u0438\u0441\u043a\u0430\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442 celery_app \u0432 api_service/celery_app.py . -Q api \u2014 \u0441\u043b\u0443\u0448\u0430\u0442\u044c \u043e\u0447\u0435\u0440\u0435\u0434\u044c api (\u043a\u0430\u043a \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d\u043e \u0432 celery_app.conf.task_default_queue ). \u0427\u0435\u0440\u0435\u0437 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Redis \u0438 PostgreSQL. \u041f\u043e\u0441\u043b\u0435 \u043f\u043e\u0434\u043d\u044f\u0442\u0438\u044f \u0432\u0441\u0435\u0445 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u043e\u0432 ( docker-compose up --build ): parser_service \u0441\u043b\u0443\u0448\u0430\u0435\u0442 HTTP /fetch \u0438 Redis-\u043e\u0447\u0435\u0440\u0435\u0434\u044c parser:tasks . api_service \u0441\u043b\u0443\u0448\u0430\u0435\u0442 HTTP /parse_sync , /parse_async , /status/{} , /result/{} . worker (Celery) \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u0437 Redis-\u043e\u0447\u0435\u0440\u0435\u0434\u0438 api , \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 parse_url_task , \u0441\u0442\u0430\u0432\u0438\u0442 \u043d\u043e\u0432\u044b\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 Redis \u0434\u043b\u044f parser_service .","title":"3.4. \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 Docker Compose \u0434\u043b\u044f Celery \u0438 Redis"},{"location":"lab3/#35-celery","text":"\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e \u0432\u043d\u0443\u0442\u0440\u0438 api_service/routes.py \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u044b: @router.post(\"/parse_async\") async def parse_async( payload: ParseAsyncCreate, session: Annotated[AsyncSession, Depends(get_session)], ) -> ParseAsyncResponse: req = await Repo.create(session, str(payload.url)) parse_url_task.delay(req.id, str(payload.url)) return ParseAsyncResponse(request_id=req.id, status=req.status) \u0421\u043e\u0437\u0434\u0430\u0451\u0442\u0441\u044f \u0437\u0430\u043f\u0438\u0441\u044c \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 parse_requests (\u043c\u043e\u0434\u0435\u043b\u044c api_service/models.py ): python class ParseRequest(Base): __tablename__ = \"parse_requests\" id: Mapped[int] = mapped_column(primary_key=True) url: Mapped[str] status: Mapped[StatusEnum] = mapped_column(Enum(StatusEnum), default=StatusEnum.pending) title: Mapped[Optional[str]] html_content: Mapped[Optional[str]] created_at: Mapped[datetime] = mapped_column(default=datetime.utcnow, server_default=func.now()) updated_at: Mapped[datetime] = mapped_column(default=datetime.utcnow, onupdate=datetime.utcnow, server_default=func.now()) * \u0421\u0442\u0430\u0442\u0443\u0441 \u043a\u0430\u0436\u0434\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0432 ParseRequest.status (enum pending , processing , success , failure ). * parse_url_task.delay(req.id, str(payload.url)) \u2014 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c api (Celery Worker).","title":"3.5. \u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0434\u043b\u044f \u0441\u0442\u0430\u0432\u043d\u043e\u0432\u043a\u0438 \u0437\u0430\u0434\u0430\u0447\u0438 \u0447\u0435\u0440\u0435\u0437 Celery"},{"location":"lab3/#_3","text":"@router.get(\"/status/{request_id}\") async def status(...): obj = await Repo.by_id(session, request_id) if not obj: raise HTTPException(status_code=404, detail=\"Not found\") return StatusResponse(request_id=obj.id, status=obj.status) @router.get(\"/result/{request_id}\") async def result(...): obj = await Repo.by_id(session, request_id) if not obj: raise HTTPException(status_code=404, detail=\"Not found\") return ResultResponse( request_id=obj.id, status=obj.status, title=obj.title, html=obj.html_content, )","title":"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430"},{"location":"lab3/#36","text":"Celery \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 beat \u0434\u043b\u044f \u043f\u0435\u0440\u0438\u043e\u0434\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0437\u0430\u0434\u0430\u0447 (cron-\u043f\u043e\u0434\u043e\u0431\u043d\u044b\u0445). \u0412 celery_app.py \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043a\u043e\u043d\u0444\u0438\u0433 beat_schedule : from celery import Celery import os REDIS_URL = os.getenv(\"REDIS_URL\", \"redis://redis:6379/0\") celery_app = Celery( \"api_service\", broker=REDIS_URL, backend=REDIS_URL, include=[\"api_service.tasks\"], ) celery_app.conf.task_default_queue = \"api\" celery_app.conf.timezone = \"UTC\" # \u041f\u0440\u0438\u043c\u0435\u0440 \u043f\u0435\u0440\u0438\u043e\u0434\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438: \u043e\u0447\u0438\u0441\u0442\u043a\u0430 \u0443\u0441\u0442\u0430\u0440\u0435\u0432\u0448\u0438\u0445 \u0437\u0430\u043f\u0438\u0441\u0435\u0439 celery_app.conf.beat_schedule = { \"cleanup_parse_requests_every_midnight\": { \"task\": \"api.cleanup_parse_requests\", \"schedule\": crontab(hour=0, minute=0), }, } \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043f\u043e\u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u0442\u0430\u0441\u043a \u0432 api_service/tasks.py : python @shared_task(name=\"api.cleanup_parse_requests\") def cleanup_parse_requests(): # \u0417\u0434\u0435\u0441\u044c \u043b\u043e\u0433\u0438\u043a\u0430 \u043e\u0447\u0438\u0441\u0442\u043a\u0438: \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0437\u0430\u043f\u0438\u0441\u0438 \u0441\u0442\u0430\u0440\u0448\u0435 N \u0434\u043d\u0435\u0439 pass * \u0412 docker-compose.yml \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u0435\u0440\u0432\u0438\u0441 beat : yaml beat: image: python:3.10-slim container_name: celery_beat working_dir: /app command: celery -A celery_app.celery_app beat --loglevel=info volumes: - ./api_service:/app depends_on: - redis - db environment: DATABASE_URL: \"postgresql+asyncpg://user:pass@db:5432/app_db\" REDIS_URL: \"redis://redis:6379/0\" \u0412\u0430\u0436\u043d\u043e: \u041f\u0435\u0440\u0438\u043e\u0434\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u043d\u0435 \u0431\u044b\u043b\u0438 \u044f\u0432\u043d\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u0432 \u043a\u043e\u0434\u0435, \u043f\u0440\u0438\u0432\u0435\u0434\u0451\u043d\u043d\u043e\u043c \u0432 collected_py_files.json , \u043d\u043e \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u043a\u0430\u043a \u0438\u0445 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c.","title":"3.6. \u041f\u0435\u0440\u0438\u043e\u0434\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 (\u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e)"},{"location":"lab3/#_4","text":"\u0412 \u0445\u043e\u0434\u0435 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b\u0438 \u0434\u043e\u0441\u0442\u0438\u0433\u043d\u0443\u0442\u044b \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b: \u041a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0438\u0437\u0430\u0446\u0438\u044f : \u0421\u043e\u0437\u0434\u0430\u043d\u044b Dockerfile.api \u0438 Dockerfile.parser \u0434\u043b\u044f \u0443\u043f\u0430\u043a\u043e\u0432\u044b\u0432\u0430\u043d\u0438\u044f FastAPI-\u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 (API \u0438 \u043f\u0430\u0440\u0441\u0435\u0440\u0430) \u0432\u043c\u0435\u0441\u0442\u0435 \u0441\u043e \u0432\u0441\u0435\u043c\u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u043c\u0438. \u041d\u0430\u043f\u0438\u0441\u0430\u043d docker-compose.yml , \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u044e\u0449\u0438\u0439 \u0441\u0435\u0440\u0432\u0438\u0441\u044b: PostgreSQL, Redis, API, \u043f\u0430\u0440\u0441\u0435\u0440, Celery worker. \u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f HTTP-\u0432\u044b\u0437\u043e\u0432\u0430 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 : \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441 \u043a \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u0443 /parse_sync (\u043f\u0430\u0440\u0441\u0435\u0440 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0435\u043c\u0435\u0434\u043b\u0435\u043d\u043d\u043e). \u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 /parse_async : \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u0411\u0414, \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 Celery-\u043e\u0447\u0435\u0440\u0435\u0434\u044c, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u0435 request_id . \u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b /status/{id} \u0438 /result/{id} \u0434\u043b\u044f \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430 \u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430. \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u043d\u0430 Celery + Redis : \u041d\u0430\u0441\u0442\u0440\u043e\u0435\u043d Celery ( api_service/celery_app.py ) \u0434\u043b\u044f \u0444\u043e\u043d\u043e\u0432\u044b\u0445 \u0437\u0430\u0434\u0430\u0447. \u0421\u043e\u0437\u0434\u0430\u043d \u0442\u0430\u0441\u043a parse_url_task (\u0432 api_service/tasks.py ), \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 \u043f\u0430\u0440\u0441\u0435\u0440\u0443 \u0447\u0435\u0440\u0435\u0437 Redis, \u0436\u0434\u0451\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0435\u0433\u043e \u0432 PostgreSQL. \u041f\u0430\u0440\u0441\u0435\u0440 ( parser_service/redis_listener.py ) \u0441\u043b\u0443\u0448\u0430\u0435\u0442 Redis-\u043e\u0447\u0435\u0440\u0435\u0434\u044c parser:tasks , \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0438 \u043a\u043b\u0430\u0434\u0451\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432 Redis \u0441 \u043a\u043b\u044e\u0447\u043e\u043c parser:results:{id} . Celery worker ( worker ) \u0437\u0430\u0431\u0438\u0440\u0430\u0435\u0442 \u0442\u0430\u0441\u043a\u0438 \u0438\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u0438 api \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0438\u0445. \u0412 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435: FastAPI API \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u044b, \u0445\u0440\u0430\u043d\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u0434\u0430\u0447\u0435 \u0432 PostgreSQL. Celery worker \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0443\u0435\u0442 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 API \u2194 Parser \u0447\u0435\u0440\u0435\u0437 Redis. Parser service \u043f\u043e \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044e \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b, \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 <title> \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c.","title":"\u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435"}]}